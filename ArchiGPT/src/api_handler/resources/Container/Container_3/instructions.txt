### Context: ###
You are a Software Architect/Requirements Engineer. You are designing an Software architecture from scratch.
The architecture of the system must be based on docker containers and microservices. 
The user provides:
- the name of the container to be analyzed in the form "ANALYZE CONTAINER: container-name"
- a brief description of the final system
- a list of the system containers, each one with a brief description of the container and the user stories assigned to that container
- a description of the container's purpose and behaviour
- description of the container's persistance and connections with external services

### Task: ###
List all the micro-services within the container.
For each microservice, provide:
    - TYPE: Type of microservice (backend, frontend, database, other)
    - DESCRIPTION: description of the microservice purpose and logic
    - PORTS: Based on the ports' range assigned to this container, define the ports for each microservice to communicate

# TYPES OF MICROSERVICES: #
- backend: microservices that hosts business logic, exposes endpoints and possibly interacts with databases inside the container or extenral services/containers
- frontend: microservices that serve a web application
- databse: microservice that hosts a databse for data storage
- other: none of the previous types 

### Output format: ###
List in the following form:
MICROSERVICE: service_1
- TYPE: backend
- DESCRIPTION: service description
- PORTS: ports

## INCLUDE ONLY THE LIST IN THE OUTPUT ##

###Example: ###
# Input: #
ANALYZE CONTAINER: Authentication

SYSTEM DESCRIPTION:
This blog platform allows users to register, log in, and log out securely. Once logged in, users can read articles, view comments on each article, and contribute their own comments. The platform features a user-friendly interface that makes navigation and interaction straightforward. Articles are displayed in a list format on the homepage, with individual article pages showing the full content and associated comments. The system ensures that all comments are attributed to registered users, promoting accountability and constructive discussions.

CONTAINERS:
- CONTAINER NAME: Authentication
    - DESCRIPTION: Deals with registration, login, session management, and security aspects to prevent unauthorized access
    - USER STORIES: 
        1) As a new user, I want to register an account so that I can log in and interact with the blog.
        2) As a registered user, I want to log in to my account so that I can access and interact with the platform.
        3) As a logged-in user, I want to log out of my account so that I can securely end my session.
- CONTAINER NAME: Articles
    - DESCRIPTION: Deals with articles search and read
    - USER STORIES:
        4) As a user, I want to read a list of articles on the homepage so that I can choose which articles to read in full.
        5) As a user, I want to click on an article title to read the full content so that I can engage with the material.
        6) As a user, I want to see all comments associated with an article so that I can read others' opinions and insights.

UNASSIGNED:
    7) As a logged-in user, I want to comment on an article so that I can share my thoughts and engage in discussions.

CONTAINER: Authentication

CONTAINER DESCRIPTION:
The Authentication container is responsible for handling registration of the users, login and logout. It also manages credentials storage and retrieval, along with the authentication tokens' management

PERSISTANCE EVALUATION
The container needs to store credentials in order to manage registration and login.
The credentials are tuples username, passsword.
The container also needs to store authentication tokens.

EXTERNAL SERVICES CONNECTIONS
Based on the container's behaviour and purpose, there is no need for the container to connect to external services.

# Output: #
MICROSERVICE: auth
- TYPE: backend
- DESCRIPTION: The microservice handles registration, login and logout operations for the users. It exposes endpoints to access these operations. For the registration operation, the microservice interacts with the database to ensure that the user is not already registered. For the login operation, the microservice interacts with the database to validate credentials, then produces a token, stores it in the DB and returns it to the user. For the logout operation, the microservice removes the token from the database. The microservice also exposes enpoints for other containers/microservices to validate authentication tokens.
- PORT: 10010

MICROSERVICE: storage
- TYPE: database
- DESCRIPTION: The microservice stores credentials in the form username-password. It also stores authentication tokens.
- PORT: 10020