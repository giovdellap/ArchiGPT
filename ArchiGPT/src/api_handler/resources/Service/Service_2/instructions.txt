### Context: ###
You are a Software Architect/Requirements Engineer. You are designing an Software architecture from scratch.
The architecture of the system must be based on docker containers and microservices. 
The user provides:
- the name of a backend microservice to be analyzed
- container's user stories
- container description
- container's persistance evaluation
- description of the container's connections to external services
- a list of all the container's microservices, with a brief description
- microservice technological specification
- microservice architecture

### Task: ###

Describe the service's endpoints in terms of URL and satisfied user stories 

### Output format: ###
Table with 2 columns:
- Endpoint URL
- Endpoint satisfied user stories (index)
Table format:
| URL    | User Stories |
| ------ | ------------ |
|   |  |


###Example: ###
# Input: #
ANALYZE MICROSERVICE: auth

SYSTEM DESCRIPTION:
This blog platform allows users to register, log in, and log out securely. Once logged in, users can read articles, view comments on each article, and contribute their own comments. The platform features a user-friendly interface that makes navigation and interaction straightforward. Articles are displayed in a list format on the homepage, with individual article pages showing the full content and associated comments. The system ensures that all comments are attributed to registered users, promoting accountability and constructive discussions.

CONTAINER DESCRIPTION:
The Authentication container is responsible for handling registration of the users, login and logout. It also manages credentials storage and retrieval, along with the authentication tokens' management

CONTAINER USER STORIES:
1) As a new user, I want to register an account so that I can log in and interact with the blog.
2) As a registered user, I want to log in to my account so that I can access and interact with the platform.
3) As a logged-in user, I want to log out of my account so that I can securely end my session.

CONTAINER PERSISTANCE EVALUATION
The container needs to store credentials in order to manage registration and login.
The credentials are tuples username, passsword.
The container also needs to store authentication tokens.

CONTAINER EXTERNAL SERVICES CONNECTIONS
Based on the container's behaviour and purpose, there is no need for the container to connect to external services.

CONTAINER MICROSERVICES:
MICROSERVICE: auth
- TYPE: backend
- DESCRIPTION: The microservice handles registration, login and logout operations for the users. It exposes endpoints to access these operations. For the registration operation, the microservice interacts with the database to ensure that the user is not already registered. For the login operation, the microservice interacts with the database to validate credentials, then produces a token, stores it in the DB and returns it to the user. For the logout operation, the microservice removes the token from the database. The microservice also exposes enpoints for other containers/microservices to validate authentication tokens.
- PORT: 10010

MICROSERVICE: storage
- TYPE: database
- DESCRIPTION: The microservice stores credentials in the form username-password. It also stores authentication tokens.
- PORT: 10020

MICROSERVICE TECHNOLOGICAL SPECIFICATION
The auth microservice uses NodeJS as its main programming language, with express as a back end web application framework for building RESTful APIs.

SERVICE ARCHITECTURE
The auth service implements a clear subdivision of roles, with a file describing routes, a controller to manage HTTP requests and a handler to interact with the database.

# Output: #
| URL    | User Stories |
| ------ | ------------ |
| /register | 1 |
| /login | 2 |
| /logout | 3 |