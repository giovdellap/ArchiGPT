[{"_id":{"$oid":"6659de4332f62c54b05aaed1"},"type":"system","data":[{"name":"userstories","message":"\n\nAs a User, I want to be able to signup in order to have an account \nAs a User, I want to be able to login\nAs a User, I want to logout from the account by clicking on the Navbar\nAs a User, I want to be able to have access to my profile settings\nAs a User, I want to be able to delete my account by clicking on a button from the profile settings page\nAs a User, I want to be able to modify my email and password in order to change my credentials\nAs a User, I want to see all recent news\nAs a User, I want to filter Italian news by selecting from the menu of available countries \nAs a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\nAs a User, I want to delete from my favourite news all the news that I'm no longer interested \nAs a User, I want to see available tickets for upcoming sporting events\nAs a User, I want to filter Italian tickets by selecting from the menu of available countries \nAs a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\nAs a User, I want to delete from my collection all the tickets that I'm no longer interested \nAs a User, I want to be able to delete all the news and tickets in my favourite list\nAs a User, I want to send a friend request to another user, in order to add him to my friend list\nAs a User, I want to check if someone has sent me a friend request, in order to accept or delete it\nAs a User, I want to delete a friend from my friend list"},{"name":"description","message":"\n\nOneSport is dedicated to offering up-to-date and pertinent information on a wide range of sports and athletic events. \nOur primary aim is to keep fans and enthusiasts well-informed and engaged. \nThe project strives to serve as a one-stop destination for comprehensive sports news, event updates, and a convenient platform for purchasing tickets to various sporting events.\n\n"},{"name":"Container Design","message":"CONTAINERS:\n- CONTAINER NAME: Authentication\n    - DESCRIPTION: Manages user registration, login, profile settings, and session management\n    - USER STORIES: \n        - As a User, I want to be able to signup in order to have an account \n        - As a User, I want to be able to login\n        - As a User, I want to logout from the account by clicking on the Navbar\n        - As a User, I want to be able to have access to my profile settings\n        - As a User, I want to be able to delete my account by clicking on a button from the profile settings page\n        - As a User, I want to be able to modify my email and password in order to change my credentials\n    - PORTS: 10000:10100\n\n- CONTAINER NAME: News_Manager\n    - DESCRIPTION: Facilitates the accessing, filtering, modifying, and management of sports news information\n    - USER STORIES:\n        - As a User, I want to see all recent news\n        - As a User, I want to filter Italian news by selecting from the menu of available countries\n        - As a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\n        - As a User, I want to delete from my favourite news all the news that I'm no longer interested\n        - As a User, I want to be able to delete all the news and tickets in my favourite list\n    - PORTS: 10200:10300\n    \n- CONTAINER NAME: Tickets_Manager\n    - DESCRIPTION: Manages functionalities related to ticket viewing, filtering, collection, and purchase for sporting events\n    - USER STORIES:\n        - As a User, I want to see available tickets for upcoming sporting events\n        - As a User, I want to filter Italian tickets by selecting from the menu of available countries \n        - As a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\n        - As a User, I want to delete from my collection all the tickets that I'm no longer interested\n    - PORTS: 10400:10500\n\n- CONTAINER NAME: Social_Interactions\n    - DESCRIPTION: Manages social interaction features such as friend requests and friendship management\n    - USER STORIES:\n        - As a User, I want to send a friend request to another user, in order to add him to my friend list\n        - As a User, I want to check if someone has sent me a friend request, in order to accept or delete it\n        - As a User, I want to delete a friend from my friend list\n    - PORTS: 10600:10700\n\nUNASSIGNED:\n    - As a User, I want to be able to delete all the news and tickets in my favourite list (Note: This seems to be a duplicate story relating to both news and tickets; it was prioritized under News_Manager, but may need coordination with Tickets_Manager)"},{"name":"User Interaction Analysis","message":"CONTAINERS:\n- CONTAINER NAME: Authentication\n    - DESCRIPTION: Manages user registration, login, profile settings, and session management\n    - USER STORIES: \n        - As a User, I want to be able to signup in order to have an account \n        - As a User, I want to be able to login\n        - As a User, I want to logout from the account by clicking on the Navbar\n        - As a User, I want to be able to have access to my profile settings\n        - As a User, I want to be able to delete my account by clicking on a button from the profile settings page\n        - As a User, I want to be able to modify my email and password in order to change my credentials\n    - PORTS: 10000:10100\n\n- CONTAINER NAME: News_Manager\n    - DESCRIPTION: Facilitates the accessing, filtering, modifying, and management of sports news information\n    - USER STORIES:\n        - As a User, I want to see all recent news\n        - As a User, I want to filter Italian news by selecting from the menu of available countries\n        - As a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\n        - As a User, I want to delete from my favourite news all the news that I'm no longer interested\n        - As a User, I want to be able to delete all the news and tickets in my favourite list\n    - PORTS: 10200:10300\n    \n- CONTAINER NAME: Tickets_Manager\n    - DESCRIPTION: Manages functionalities related to ticket viewing, filtering, collection, and purchase for sporting events\n    - USER STORIES:\n        - As a User, I want to see available tickets for upcoming sporting events\n        - As a User, I want to filter Italian tickets by selecting from the menu of available countries \n        - As a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\n        - As a User, I want to delete from my collection all the tickets that I'm no longer interested\n    - PORTS: 10400:10500\n\n- CONTAINER NAME: Social_Interactions\n    - DESCRIPTION: Manages social interaction features such as friend requests and friendship management\n    - USER STORIES:\n        - As a User, I want to send a friend request to another user, in order to add him to my friend list\n        - As a User, I want to check if someone has sent me a friend request, in order to accept or delete it\n        - As a User, I want to delete a friend from my friend list\n    - PORTS: 10600:10700\n\n- CONTAINER NAME: Frontend\n    - DESCRIPTION: Handles the frontend exposure to the user, providing an intuitive web interface for accessing all features of the OneSport platform\n    - PORTS: 12000:12100\n\nUNASSIGNED:\n    - As a User, I want to be able to delete all the news and tickets in my favourite list (Note: This seems to be a duplicate story relating to both news and tickets; it was prioritized under News_Manager, but may need coordination with Tickets_Manager)"},{"name":"Match Missing User Stories","message":""},{"name":"Architectural Patterns","message":""}]},{"_id":{"$oid":"6659de4332f62c54b05aaed2"},"type":"status","data":{"system":[{"name":"Container Design","status":"OK"},{"name":"User Interaction Analysis","status":"OK"},{"name":"Match Missing User Stories","status":"NO"},{"name":"Architectural Patterns ","status":"NO"}],"containers":[{"name":"Authentication","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[]},{"name":"News_Manager","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[{"name":"news_access","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"news_management","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"user_preferences","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"news_storage","description":"OK","specifications":"NEXT"}]},{"name":"Tickets_Manager","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[{"name":"ticket_viewer","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_filter","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_collector","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_remover","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_database","description":"OK","specifications":"NEXT"}]},{"name":"Social_Interactions","ContainerDescriptionGenerator":"NEXT","ContainerSpecificationGenerator":"NO","MicroServices":"NO","services":[]},{"name":"Frontend","ContainerDescriptionGenerator":"NEXT","ContainerSpecificationGenerator":"NO","MicroServices":"NO","services":[]}]}},{"_id":{"$oid":"6659df5a32f62c54b05aaed3"},"type":"container","data":{"name":"Authentication","ContainerDescriptionGenerator":"DESCRIPTION: \nThe Authentication container in the OneSport system is responsible for overseeing all aspects related to user accounts and their sessions. Its primary functions include managing user registration, login processes, user session management, and profile settings adjustments. It allows users to sign up to create an account, log in to access personalized features, and log out securely. Additionally, users can access their profile settings to make changes to their email, password, or delete their accounts entirely. This container ensures that all user interactions with their accounts are handled securely and efficiently, providing a robust foundation for maintaining user trust and safety on the platform.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe Authentication container is required to store user data persistently to handle registration, login, profile management, and session management effectively. This data typically includes user credentials such as email addresses and passwords, along with session-related data like user session tokens or identifiers. Additionally, functionalities for updating profile settings (such as changing email and password) and deleting accounts necessitate the storage of users' personal settings and preferences. All this data needs robust encryption and secure storage mechanisms to maintain user privacy and security.\n\nEXTERNAL SERVICES CONNECTIONS\nConsidering the core functionalities like user registration, login, profile settings, and session management, the Authentication container does not inherently require connections to external services for its primary operations. However, if the system employs external identity verification services or integrates additional security measures such as multi-factor authentication (MFA) services, then this container might need to establish connections to those external providers. If the current design does not incorporate such features, then no external service connections are required for the basic functionalities described.","MicroServices":"MICROSERVICES: \nMICROSERVICE: authService\n- TYPE: backend\n- DESCRIPTION: Manages user registration, login, logout, and session handling. This service provides endpoints for registering new users, logging in to retrieve a session token, logging out to invalidate the session token, and managing user profile settings like updating passwords or emails and deleting accounts.\n- PORTS: 10010\n\nMICROSERVICE: sessionDB\n- TYPE: database\n- DESCRIPTION: Handles persistent storage of user credentials, session tokens, and user profile data. This database ensures the secure storage and retrieval of sensitive user information necessary for authentication and user management tasks.\n- PORTS: 10020\n\nMICROSERVICE: profileManager\n- TYPE: backend\n- DESCRIPTION: Deals specifically with user profile settings management, including updating credentials and deleting user profiles. These operations ensure that user data is correctly managed and updated in the storage system.\n- PORTS: 10030","description":"Manages user registration, login, profile settings, and session management","ports":"10000:10100","userstories":"- As a User, I want to be able to signup in order to have an account \n        - As a User, I want to be able to login\n        - As a User, I want to logout from the account by clicking on the Navbar\n        - As a User, I want to be able to have access to my profile settings\n        - As a User, I want to be able to delete my account by clicking on a button from the profile settings page\n        - As a User, I want to be able to modify my email and password in order to change my credentials","services":[]}},{"_id":{"$oid":"6659df5a32f62c54b05aaed4"},"type":"container","data":{"name":"News_Manager","ContainerDescriptionGenerator":"DESCRIPTION: \nThe News_Manager container is responsible for the core functionality related to sports news on the OneSport platform. It handles different facets of news management such as accessing the latest news updates, providing options for users to filter news based on specific criteria (like by country), and managing personalized lists of favorite news items. Users can add news to their favorites for later reading, and likewise, remove news from their favorites when no longer needed. This container plays a critical role in ensuring that sports enthusiasts and fans find relevant and interesting content quickly and efficiently, enhancing user engagement with the platform.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe News_Manager container requires persistent storage for maintaining news items and user's favorite news lists. It needs to store information about each news item, such as title, content, source, time of posting, and categorization (e.g., by sport or country). Additionally, for each user, the container must persist data regarding their individual favorite news selections, allowing users to save, access, and modify these selections over time. This will involve relational or non-relational database systems to handle and serve the news data efficiently.\n\nEXTERNAL SERVICES CONNECTIONS\nThis container may need to connect to external news API services to fetch current sports news. Integration with APIs like those provided by sports news aggregators or media outlets would enable the container to pull in up-to-date sports information and facilitate the filtering functionality by letting users select news by categories such as country. Additionally, for enhanced features, it might connect with data analysis services to analyze user preferences or reading habits to recommend news, which increases user engagement and personalizes the experience further.","MicroServices":"MICROSERVICES: \nMICROSERVICE: news_access\n- TYPE: backend\n- DESCRIPTION: This microservice is responsible for fetching and displaying the latest sports news. It interfaces with external news APIs to get current sports news and presents it to the users. Additionally, it provides functionality to filter news based on predefined criteria like country or sport type.\n- PORTS: 10200\n\nMICROSERVICE: news_management\n- TYPE: backend\n- DESCRIPTION: Manages user interactions with news articles, such as adding or removing news from their favorite lists. It ensures that all modifications to the user's favorite news are persistent and updates the user's profile accordingly.\n- PORTS: 10210\n\nMICROSERVICE: user_preferences\n- TYPE: backend\n- DESCRIPTION: Analyzes user activity and preferences to recommend personalized news articles. This microservice uses data analysis techniques to enhance user engagement by providing targeted news content based on users' past behaviors and preferred categories.\n- PORTS: 10220\n\nMICROSERVICE: news_storage\n- TYPE: database\n- DESCRIPTION: Responsible for storing and managing all data related to news items and users' favorite lists. This includes news articles' titles, content, sources, posting times, categorization, and individual user preferences.\n- PORTS: 10230","description":"Facilitates the accessing, filtering, modifying, and management of sports news information","ports":"10200:10300","userstories":"- As a User, I want to see all recent news\n        - As a User, I want to filter Italian news by selecting from the menu of available countries\n        - As a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\n        - As a User, I want to delete from my favourite news all the news that I'm no longer interested\n        - As a User, I want to be able to delete all the news and tickets in my favourite list","services":[{"name":"news_access","type":"backend","description":"This microservice is responsible for fetching and displaying the latest sports news. It interfaces with external news APIs to get current sports and presents it to the users. Additionally, it provides functionality to filter news based on predefined criteria like country or sport type.","port":"10200","specifications":"","endpoints":""},{"name":"news_management","type":"backend","description":"Manages user interactions with news articles, such as adding or removing news from their favorite lists. It ensures that all modifications to the user's favorite news are persistent and updates the user's profile accordingly.","port":"10210","specifications":"","endpoints":""},{"name":"user_preferences","type":"backend","description":"Analyzes user activity and preferences to recommend personalized news articles. This microservice uses data analysis techniques to enhance user engagement by providing targeted news content based on users' past behaviors and preferred categories.","port":"10220","specifications":"","endpoints":""},{"name":"news_storage","type":"database","description":"Responsible for storing and managing all data related to news items and users' favorite lists. This includes news articles' titles, content, sources, posting times, categorization, and individual user preferences.","port":"10230","specifications":""}]}},{"_id":{"$oid":"6659df5a32f62c54b05aaed5"},"type":"container","data":{"name":"Tickets_Manager","ContainerDescriptionGenerator":"DESCRIPTION: \nThe Tickets_Manager container is specifically designed to handle various ticket-related functionalities for the OneSport platform. Its main responsibilities include displaying available tickets for upcoming sports events, enabling users to filter tickets based on specific criteria such as country, and managing users’ collections of tickets they are interested in purchasing later. Additionally, it allows users to remove tickets from their collection that they no longer wish to buy. This container is crucial for providing users with an efficient way to manage and purchase tickets, enhancing their overall experience with the platform.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe Tickets_Manager container requires persistent storage to effectively manage the user's collection of tickets they are interested in purchasing and those they want to remove. Data relating to which tickets are currently available, as well as user-specific collections (tickets a user has added or removed) need to be persistently stored. This information includes ticket IDs, event details, dates, pricing, and the state of the ticket in a user's collection.\n\nEXTERNAL SERVICES CONNECTIONS\nThe Tickets_Manager container likely needs to establish connections with external ticketing services or event management systems to fetch up-to-date information on tickets for various sporting events. This could include pulling data about event details, availability, and pricing from these external APIs to ensure that the ticket listings are current and comprehensive. Additionally, it may connect to payment processing services to handle ticket purchases once a user decides to buy tickets from their collection.","MicroServices":"MICROSERVICES: \nMICROSERVICE: ticket_viewer\n- TYPE: backend\n- DESCRIPTION: Handles the retrieval and display of available tickets for upcoming sports events, allowing users to see various options. It interacts with external services to fetch the latest data on ticket availability and event details.\n- PORTS: 10400\n\nMICROSERVICE: ticket_filter\n- TYPE: backend\n- DESCRIPTION: Provides functionality to filter available tickets based on user's preferences such as country or event type. This microservice ensures that users can efficiently find tickets that meet their specific needs.\n- PORTS: 10410\n\nMICROSERVICE: ticket_collector\n- TYPE: backend\n- DESCRIPTION: Manages the collection of tickets that users are interested in purchasing later. It allows users to add tickets to their collection, and also handles the user's intent to eventually purchase these tickets.\n- PORTS: 10420\n\nMICROSERVICE: ticket_remover\n- TYPE: backend\n- DESCRIPTION: Allows users to remove tickets from their collection that they no longer wish to purchase, managing the state of the collection accordingly.\n- PORTS: 10430\n\nMICROSERVICE: ticket_database\n- TYPE: database\n- DESCRIPTION: Stores information about the tickets, including available tickets, user-specific collections, and any updates to these collections. This microservice is essential for persisting user data related to ticket management.\n- PORTS: 10440","description":"Manages functionalities related to ticket viewing, filtering, collection, and purchase for sporting events","ports":"10400:10500","userstories":"- As a User, I want to see available tickets for upcoming sporting events\n        - As a User, I want to filter Italian tickets by selecting from the menu of available countries \n        - As a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\n        - As a User, I want to delete from my collection all the tickets that I'm no longer interested","services":[{"name":"ticket_viewer","type":"backend","description":"Handles the retrieval and display of available tickets for upcoming sports events, allowing users to see various options. It interacts with external services to fetch the latest data on ticket availability and event details.","port":10400,"specifications":"","endpoints":""},{"name":"ticket_filter","type":"backend","description":"Provides functionality to filter available tickets based on user's preferences such as country or event type. This microservice ensures that users can efficiently find tickets that meet their specific needs.","port":10410,"specifications":"","endpoints":""},{"name":"ticket_collector","type":"backend","description":"Manages the collection of tickets that users are interested in purchasing later. It allows users to add tickets to their collection, and also handles the user's intent to eventually purchase these tickets.","port":10420,"specifications":"","endpoints":""},{"name":"ticket_remover","type":"backend","description":"Allows users to remove tickets from their collection that they no longer wish to purchase, managing the state of the collection accordingly.","port":10430,"specifications":"","endpoints":""},{"name":"ticket_database","type":"database","description":"Stores information about the tickets, including available tickets, user-specific collections, and any updates to these collections. This microservice is essential for persisting user data related to ticket management.","port":10440,"specifications":""}]}},{"_id":{"$oid":"6659df5a32f62c54b05aaed6"},"type":"container","data":{"name":"Social_Interactions","ContainerDescriptionGenerator":"","ContainerSpecificationGenerator":"","MicroServices":"","description":"","ports":"","userstories":"","services":[]}},{"_id":{"$oid":"6659df5a32f62c54b05aaed7"},"type":"container","data":{"name":"Frontend","ContainerDescriptionGenerator":"","ContainerSpecificationGenerator":"","MicroServices":"","description":"","ports":"","userstories":"","services":[]}}]