[{"_id":{"$oid":"6658c45bfca889d3ef4b271f"},"type":"system","data":[{"name":"userstories","message":"\n\nAs a User, I want to be able to signup in order to have an account \nAs a User, I want to be able to login\nAs a User, I want to logout from the account by clicking on the Navbar\nAs a User, I want to be able to have access to my profile settings\nAs a User, I want to be able to delete my account by clicking on a button from the profile settings page\nAs a User, I want to be able to modify my email and password in order to change my credentials\nAs a User, I want to see all recent news\nAs a User, I want to filter Italian news by selecting from the menu of available countries \nAs a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\nAs a User, I want to delete from my favourite news all the news that I'm no longer interested \nAs a User, I want to see available tickets for upcoming sporting events\nAs a User, I want to filter Italian tickets by selecting from the menu of available countries \nAs a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\nAs a User, I want to delete from my collection all the tickets that I'm no longer interested \nAs a User, I want to be able to delete all the news and tickets in my favourite list\nAs a User, I want to send a friend request to another user, in order to add him to my friend list\nAs a User, I want to check if someone has sent me a friend request, in order to accept or delete it\nAs a User, I want to delete a friend from my friend list"},{"name":"description","message":"\n\nOneSport is dedicated to offering up-to-date and pertinent information on a wide range of sports and athletic events. \nOur primary aim is to keep fans and enthusiasts well-informed and engaged. \nThe project strives to serve as a one-stop destination for comprehensive sports news, event updates, and a convenient platform for purchasing tickets to various sporting events.\n\n"},{"name":"Container Design","message":"CONTAINERS:\n- CONTAINER NAME: UserManagement\n    - DESCRIPTION: Manages user account operations such as signup, login, logout, profile settings, deleting account, and modifying credentials\n    - USER STORIES: \n        1) As a User, I want to be able to signup in order to have an account \n        2) As a User, I want to be able to login\n        3) As a User, I want to logout from the account by clicking on the Navbar\n        4) As a User, I want to be able to have access to my profile settings\n        5) As a User, I want to be able to delete my account by clicking on a button from the profile settings page\n        6) As a User, I want to be able to modify my email and password in order to change my credentials\n    - PORTS: 2000:2100\n- CONTAINER NAME: NewsManagement\n    - DESCRIPTION: Handles news operations such as displaying recent news, filtering by country, adding to favourite list, and deleting from favourite list\n    - USER STORIES:\n        7) As a User, I want to see all recent news\n        8) As a User, I want to filter Italian news by selecting from the menu of available countries \n        9) As a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\n        10) As a User, I want to delete from my favourite news all the news that I'm no longer interested \n        16) As a User, I want to delete all the news and tickets in my favourite list\n    - PORTS: 2200:2300\n- CONTAINER NAME: TicketManagement\n    - DESCRIPTION: Manages ticket operations such as displaying available tickets, filtering by country, adding to collection, and deleting from collection\n    - USER STORIES:\n        11) As a User, I want to see available tickets for upcoming sporting events\n        12) As a User, I want to filter Italian tickets by selecting from the menu of available countries \n        13) As a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\n        14) As a User, I want to delete from my collection all the tickets that I'm no longer interested \n        15) As a User, I want to delete all the news and tickets in my favourite list\n    - PORTS: 2400:2500\n- CONTAINER NAME: SocialNetworking\n    - DESCRIPTION: Handles social networking operations such as sending friend requests, checking friend requests, and deleting friends\n    - USER STORIES:\n        17) As a User, I want to send a friend request to another user, in order to add him to my friend list\n        18) As a User, I want to check if someone has sent me a friend request, in order to accept or delete it\n        19) As a User, I want to delete a friend from my friend list\n    - PORTS: 2600:2700\n\nUNASSIGNED:\n    - As a User, I want to logout from the account by clicking on the Navbar"},{"name":"User Interaction Analysis","message":"CONTAINERS:\n- CONTAINER NAME: UserManagement\n    - DESCRIPTION: Manages user account operations such as signup, login, logout, profile settings, deleting account, and modifying credentials\n    - USER STORIES: \n        1) As a User, I want to be able to signup in order to have an account \n        2) As a User, I want to be able to login\n        3) As a User, I want to logout from the account by clicking on the Navbar\n        4) As a User, I want to be able to have access to my profile settings\n        5) As a User, I want to be able to delete my account by clicking on a button from the profile settings page\n        6) As a User, I want to be able to modify my email and password in order to change my credentials\n    - PORTS: 2000:2100\n- CONTAINER NAME: NewsManagement\n    - DESCRIPTION: Handles news operations such as displaying recent news, filtering by country, adding to favourite list, and deleting from favourite list\n    - USER STORIES:\n        7) As a User, I want to see all recent news\n        8) As a User, I want to filter Italian news by selecting from the menu of available countries \n        9) As a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\n        10) As a User, I want to delete from my favourite news all the news that I'm no longer interested \n        16) As a User, I want to delete all the news and tickets in my favourite list\n    - PORTS: 2200:2300\n- CONTAINER NAME: TicketManagement\n    - DESCRIPTION: Manages ticket operations such as displaying available tickets, filtering by country, adding to collection, and deleting from collection\n    - USER STORIES:\n        11) As a User, I want to see available tickets for upcoming sporting events\n        12) As a User, I want to filter Italian tickets by selecting from the menu of available countries \n        13) As a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\n        14) As a User, I want to delete from my collection all the tickets that I'm no longer interested \n        15) As a User, I want to delete all the news and tickets in my favourite list\n    - PORTS: 2400:2500\n- CONTAINER NAME: SocialNetworking\n    - DESCRIPTION: Handles social networking operations such as sending friend requests, checking friend requests, and deleting friends\n    - USER STORIES:\n        17) As a User, I want to send a friend request to another user, in order to add him to my friend list\n        18) As a User, I want to check if someone has sent me a friend request, in order to accept or delete it\n        19) As a User, I want to delete a friend from my friend list\n    - PORTS: 2600:2700\n\n- CONTAINER NAME: Frontend\n    - DESCRIPTION: Handles the frontend exposure to the user and acts as a starting endpoint for the system\n    - PORTS: 2800:2900\n\nUNASSIGNED:\n    - As a User, I want to logout from the account by clicking on the Navbar"},{"name":"Match Missing User Stories","message":""},{"name":"Architectural Patterns","message":""}]},{"_id":{"$oid":"6658c45bfca889d3ef4b2720"},"type":"status","data":{"system":[{"name":"Container Design","status":"OK"},{"name":"User Interaction Analysis","status":"OK"},{"name":"Match Missing User Stories","status":"NO"},{"name":"Architectural Patterns ","status":"NO"}],"containers":[{"name":"UserManagement","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[]},{"name":"NewsManagement","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[{"name":"news_display","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"news_filter","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_display","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_filter","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"social_operations","description":"OK","specifications":"NEXT","endpoints":"NO"}]},{"name":"TicketManagement","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[{"name":"ticket_display","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_filter","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_collection","description":"OK","specifications":"NEXT","endpoints":"NO"},{"name":"ticket_database","description":"OK","specifications":"NEXT"},{"name":"external_api","description":"OK","specifications":"NEXT"}]},{"name":"SocialNetworking","ContainerDescriptionGenerator":"OK","ContainerSpecificationGenerator":"OK","MicroServices":"OK","services":[{"name":"social","description":"OK","specifications":"NEXT","endpoints":"NO"}]},{"name":"Frontend","ContainerDescriptionGenerator":"NEXT","ContainerSpecificationGenerator":"NO","MicroServices":"NO","services":[]}]}},{"_id":{"$oid":"6658c5adfca889d3ef4b2721"},"type":"container","data":{"name":"UserManagement","ContainerDescriptionGenerator":"DESCRIPTION: \nThe UserManagement container is responsible for managing user account operations within the OneSport system. It handles functionalities such as user signup, login, logout, profile settings management, account deletion, and credential modification. This container ensures that users can perform essential account-related tasks seamlessly and securely.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe UserManagement container needs to store user account information such as usernames, passwords, email addresses, and profile settings to fulfill its purpose and user stories.\n\nEXTERNAL SERVICES CONNECTIONS\nBased on the container's purpose and tasks, there is no explicit requirement for the UserManagement container to connect to external services.","MicroServices":"MICROSERVICES: \nMICROSERVICE: signup\n- TYPE: backend\n- DESCRIPTION: Manages the user signup process by validating user-provided information and creating a new account in the system.\n- PORT: 2000\n\nMICROSERVICE: login\n- TYPE: backend\n- DESCRIPTION: Handles user login functionality by verifying credentials and providing access to the user account.\n- PORT: 2001\n\nMICROSERVICE: logout\n- TYPE: backend\n- DESCRIPTION: Controls the user logout operation to end the current session securely.\n- PORT: 2002\n\nMICROSERVICE: profile\n- TYPE: backend\n- DESCRIPTION: Manages user profile settings, allowing users to view and modify their personal information.\n- PORT: 2003\n\nMICROSERVICE: settings\n- TYPE: backend\n- DESCRIPTION: Service that enables users to configure and adjust their account security and preferences.\n- PORT: 2004\n\nMICROSERVICE: credentials\n- TYPE: backend\n- DESCRIPTION: Responsible for handling user credentials modification such as email and password changes.\n- PORT: 2005\n\nMICROSERVICE: userDB\n- TYPE: database\n- DESCRIPTION: Stores user account information including usernames, passwords, email addresses, and profile settings.\n- PORT: 2006\n\nMICROSERVICE: friends\n- TYPE: backend\n- DESCRIPTION: Manages user social connections, allowing them to send friend requests and manage their friends list.\n- PORT: 2007","description":"Manages user account operations such as signup, login, logout, profile settings, deleting account, and modifying credentials","ports":"2000:2100","userstories":"1) As a User, I want to be able to signup in order to have an account \n        2) As a User, I want to be able to login\n        3) As a User, I want to logout from the account by clicking on the Navbar\n        4) As a User, I want to be able to have access to my profile settings\n        5) As a User, I want to be able to delete my account by clicking on a button from the profile settings page\n        6) As a User, I want to be able to modify my email and password in order to change my credentials","services":[]}},{"_id":{"$oid":"6658c5adfca889d3ef4b2722"},"type":"container","data":{"name":"NewsManagement","ContainerDescriptionGenerator":"DESCRIPTION: \nThe NewsManagement container is responsible for managing news-related operations within the OneSport system. This includes functionalities such as displaying recent news, filtering news by country, adding news to a favorite list, and deleting news from the favorite list. The container serves as a hub for providing users with up-to-date information on various sports and athletic events, enhancing user engagement and keeping fans well-informed.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe NewsManagement container does not need to store any data as per its purpose and user stories.\n\nEXTERNAL SERVICES CONNECTIONS\nBased on the container's behavior and purpose, there is no need for the NewsManagement container to connect to external services.","MicroServices":"MICROSERVICES: \nMICROSERVICE: news_display\n- TYPE: backend\n- DESCRIPTION: This microservice is responsible for displaying recent news, filtering news by country, adding news to a favorite list, and deleting news from the favorite list. It interacts with the NewsManagement container to fetch and manipulate news data based on user requests.\n- PORTS: 2200\n\nMICROSERVICE: news_filter\n- TYPE: backend\n- DESCRIPTION: This microservice handles the functionality of filtering news by country. It receives user requests for specific country-based news filtering and communicates with the NewsManagement container to retrieve the relevant news data.\n- PORTS: 2201\n\nMICROSERVICE: ticket_display\n- TYPE: backend\n- DESCRIPTION: This microservice facilitates the display of available tickets for upcoming sporting events. It interacts with the TicketManagement container to retrieve and showcase the ticket information to users.\n- PORTS: 2400\n\nMICROSERVICE: ticket_filter\n- TYPE: backend\n- DESCRIPTION: This microservice is responsible for filtering tickets by country. It receives user requests for specific country-based ticket information and communicates with the TicketManagement container to fetch the relevant ticket data.\n- PORTS: 2401\n\nMICROSERVICE: social_operations\n- TYPE: backend\n- DESCRIPTION: This microservice manages social networking operations within the OneSport system, including sending friend requests, checking friend requests, and deleting friends. It interacts with the SocialNetworking container to execute these social functionalities.\n- PORTS: 2600","description":"Handles news operations such as displaying recent news, filtering by country, adding to favourite list, and deleting from favourite list","ports":"2200:2300","userstories":"7) As a User, I want to see all recent news\n        8) As a User, I want to filter Italian news by selecting from the menu of available countries \n        9) As a User, I want to add to my favourite news all the news I'm interested in, in order to read them later\n        10) As a User, I want to delete from my favourite news all the news that I'm no longer interested \n        16) As a User, I want to delete all the news and tickets in my favourite list","services":[{"name":"news_display","type":"backend","description":"This microservice is responsible for displaying recent news, filtering news by country, adding news to a favorite list, and deleting news from the favorite list. It interacts with the NewsManagement container to fetch and manipulate news data based on user requests.","port":"2200","specifications":"","endpoints":""},{"name":"news_filter","type":"backend","description":"This microservice handles the functionality of filtering news by country. It receives user requests for specific country-based news filtering and communicates with the NewsManagement container to retrieve the relevant news data.","port":"2201","specifications":"","endpoints":""},{"name":"ticket_display","type":"backend","description":"This microservice facilitates the display of available tickets for upcoming sporting events. It interacts with the TicketManagement container to retrieve and showcase the ticket information to users.","port":"2400","specifications":"","endpoints":""},{"name":"ticket_filter","type":"backend","description":"This microservice is responsible for filtering tickets by country. It receives user requests for specific country-based ticket information and communicates with the TicketManagement container to fetch the relevant ticket data.","port":"2401","specifications":"","endpoints":""},{"name":"social_operations","type":"backend","description":"This microservice manages social networking operations within the OneSport system, including sending friend requests, checking friend requests, and deleting friends. It interacts with the SocialNetworking container to execute these social functionalities.","port":"2600","specifications":"","endpoints":""}]}},{"_id":{"$oid":"6658c5adfca889d3ef4b2723"},"type":"container","data":{"name":"TicketManagement","ContainerDescriptionGenerator":"DESCRIPTION: \nThe TicketManagement container is responsible for managing ticket operations within the OneSport system. It handles tasks such as displaying available tickets for upcoming sporting events, filtering tickets based on country preferences, adding tickets to a user's collection for future purchase, and deleting unwanted tickets from the collection.\n\nThe primary purpose of the TicketManagement container is to provide users with a seamless experience in browsing, selecting, and managing sports event tickets. By offering features like filtering by country and enabling users to curate their ticket collection, this container enhances the user's ability to engage with and purchase tickets for various sporting events.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe TicketManagement container needs to store data related to available tickets, user preferences, ticket collections, and deleted tickets to fulfill its purpose and user stories. The data stored includes ticket details (e.g., event name, location, date, price), user preferences for filtering tickets by country, user's ticket collection, and a log of deleted tickets to manage user interactions effectively.\n\nEXTERNAL SERVICES CONNECTIONS\nBased on the container's purpose and user stories, the TicketManagement container may need to connect to external ticketing services or APIs to fetch real-time ticket availability, pricing, and event information. This external service integration would enhance the system's ability to provide accurate and timely updates on available tickets for various sporting events.","MicroServices":"MICROSERVICES: \nMICROSERVICE: ticket_display\n- TYPE: backend\n- DESCRIPTION: Manages the display of available tickets for upcoming sporting events. This microservice interacts with the database to retrieve ticket information and formats it for display to the user.\n- PORT: 2400\n\nMICROSERVICE: ticket_filter\n- TYPE: backend\n- DESCRIPTION: Handles the filtering of tickets based on user preferences like country. It receives filtering criteria from the frontend, retrieves the corresponding tickets from the database, and sends back the filtered list.\n- PORT: 2401\n\nMICROSERVICE: ticket_collection\n- TYPE: backend\n- DESCRIPTION: Manages adding tickets to a user's collection for future purchase and deleting unwanted tickets from the collection. This microservice interacts with the database to store and retrieve user-specific ticket collections.\n- PORT: 2402\n\nMICROSERVICE: ticket_database\n- TYPE: database\n- DESCRIPTION: Stores data related to available tickets, user preferences, ticket collections, and deleted tickets. The database contains ticket details (event name, location, date, price), user preferences for filtering, user's ticket collection, and a log of deleted tickets.\n- PORT: 2500\n\nMICROSERVICE: external_api\n- TYPE: other\n- DESCRIPTION: Connects to external ticketing services or APIs to fetch real-time ticket availability, pricing, and event information. Enhances the system's ability to provide accurate updates on available tickets.\n- PORT: N/A","description":"Manages ticket operations such as displaying available tickets, filtering by country, adding to collection, and deleting from collection","ports":"2400:2500","userstories":"11) As a User, I want to see available tickets for upcoming sporting events\n        12) As a User, I want to filter Italian tickets by selecting from the menu of available countries \n        13) As a User, I want to add to my collection all the tickets I'm interested in, in order to purchase them later\n        14) As a User, I want to delete from my collection all the tickets that I'm no longer interested \n        15) As a User, I want to delete all the news and tickets in my favourite list","services":[{"name":"ticket_display","type":"backend","description":"Manages the display of available tickets for upcoming sporting events. This microservice interacts with the database to retrieve ticket information and formats it for display to the user.","port":"2400","specifications":"","endpoints":""},{"name":"ticket_filter","type":"backend","description":"Handles the filtering of tickets based on user preferences like country. It receives filtering criteria from the frontend, retrieves the corresponding tickets from the database, and sends back the filtered list.","port":"2401","specifications":"","endpoints":""},{"name":"ticket_collection","type":"backend","description":"Manages adding tickets to a user's collection for future purchase and deleting unwanted tickets from the collection. This microservice interacts with the database to store and retrieve user-specific ticket collections.","port":"2402","specifications":"","endpoints":""},{"name":"ticket_database","type":"database","description":"Stores data related to available tickets, user preferences, ticket collections, and deleted tickets. The database contains ticket details (event name, location, date, price), user preferences for filtering, user's ticket collection, and a log of deleted tickets.","port":"2500","specifications":""},{"name":"external_api","type":"other","description":"Connects to external ticketing services or APIs to fetch real-time ticket availability, pricing, and event information. Enhances the system's ability to provide accurate updates on available tickets.","port":"N/A","specifications":""}]}},{"_id":{"$oid":"6658c5adfca889d3ef4b2724"},"type":"container","data":{"name":"SocialNetworking","ContainerDescriptionGenerator":"DESCRIPTION: \nThe SocialNetworking container is responsible for managing social networking operations within the system. Through this container, users can send friend requests to other users, check incoming friend requests, and manage their friend list by adding or deleting friends. The container facilitates communication and connection between users, enhancing the social aspect of the platform.","ContainerSpecificationGenerator":"PERSISTANCE EVALUATION\nThe SocialNetworking container needs to store data related to friend requests and user friendships. This data includes user identifiers, friend relationship information, and status of friend requests.\n\nEXTERNAL SERVICES CONNECTIONS\nBased on the container's purpose, there is no immediate need for external service connections. The functionality provided by the SocialNetworking container can be handled within the system without requiring external services.","MicroServices":"MICROSERVICES: \nMICROSERVICE: social\n- TYPE: backend\n- DESCRIPTION: Manages social networking operations like sending friend requests, checking friend requests, and deleting friends. It handles the communication and connection between users, facilitating the social aspect of the platform. The microservice interacts with the database to store data related to friend requests, user identifiers, friend relationships, and the status of friend requests.\n- PORTS: 2600:2700","description":"Handles social networking operations such as sending friend requests, checking friend requests, and deleting friends","ports":"2600:2700","userstories":"17) As a User, I want to send a friend request to another user, in order to add him to my friend list\n        18) As a User, I want to check if someone has sent me a friend request, in order to accept or delete it\n        19) As a User, I want to delete a friend from my friend list","services":[{"name":"social","type":"backend","description":"Manages social networking operations like sending friend requests, checking friend requests, and deleting friends. It handles the communication and connection between users, facilitating the social aspect of the platform. The microservice interacts with the database to store data related to friend requests, user identifiers, friend relationships, and the status of friend requests.","port":"2600:2700","specifications":"","endpoints":""}]}},{"_id":{"$oid":"6658c5adfca889d3ef4b2725"},"type":"container","data":{"name":"Frontend","ContainerDescriptionGenerator":"","ContainerSpecificationGenerator":"","MicroServices":"","description":"","ports":"","userstories":"","services":[]}}]