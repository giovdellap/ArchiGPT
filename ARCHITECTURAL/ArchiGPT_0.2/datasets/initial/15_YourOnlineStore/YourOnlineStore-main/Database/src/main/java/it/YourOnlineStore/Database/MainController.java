package it.YourOnlineStore.Database;

import java.util.List;

import javax.jms.JMSException;
import javax.naming.NamingException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.view.RedirectView;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/product") // This means URL's start with /Database (after Application path)
public class MainController {
	@Autowired // This means to get the bean called productRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ProductRepository productRepository;
	@Autowired
//    @Qualifier("jMSProducer")
	private ToStoreJMSProducer producer;

	@Autowired
	public ProductService productService;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody RedirectView addNewProduct(@RequestParam String productName, @RequestParam Float cost,
			@RequestParam Integer disponibility, @RequestParam String imageUrl, @RequestParam String description) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Product product = new Product();
		product.setProductName(productName);
		product.setCost(cost);
		product.setDisponibility(disponibility);
		product.setImage(imageUrl);
		product.setDescription(description);
		productRepository.save(product);
		try {
			producer.sendInsert(product);
		} catch (NamingException | JMSException | InterruptedException e) {
			e.printStackTrace();
		}
		RedirectView redirectView = new RedirectView();
		redirectView.setUrl("http://localhost:8080/home");
		return redirectView;
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Product> getAllProducts() {
		// This returns a JSON or XML with the products

		return productRepository.findAll();
	}

	@GetMapping(path = "/{id}")
	public @ResponseBody Product getProduct(@PathVariable Integer id) {
		if (productRepository.findById(id).isPresent())
			return productRepository.findById(id).get();
		else
			return null;
	}

	@GetMapping(path = "/error")
	public @ResponseBody String error() {
		return "Error Page";
	}

	@PostMapping(path = "/checkDisponibility") // Map ONLY POST Requests
	public @ResponseBody Boolean getCheckDisponibility(@RequestBody Dto dto) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Integer i = 0;
		List<Integer> productIds = dto.getProductIds();
		List<Integer> amounts = dto.getAmounts();
		while (i < productIds.size()) {
			Integer productId = productIds.get(i);
			Integer amount = amounts.get(i);
			if (productService.exists(productId)) {
				Product product = productService.findById(productId).get();
				Integer disponibility = product.getDisponibility();
				if (disponibility < amount) {
					return false;
				}
				i++;
			} else {
				return false;
			}
		}
		return true;
	}

}