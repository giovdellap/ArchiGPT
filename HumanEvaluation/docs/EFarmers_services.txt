CONTAINER NAME: user_management
  MICROSERVICE: user_authentication
    TYPE: backend
    DESCRIPTION: This microservice handles user authentication processes, including login, logout, and registration using email. It also supports authentication using OAuth providers such as Google and Facebook. It interacts with the database to validate user credentials and store OAuth tokens.
  MICROSERVICE: profile_management
    TYPE: backend
    DESCRIPTION: This microservice allows users to access and update their personal information. It manages user profiles, including basic details and allows the modification of roles, such as transitioning a customer to a Farmer or Rider.
  MICROSERVICE: role_management
    TYPE: backend
    DESCRIPTION: This microservice specifically handles role transitions, allowing users to update their status to Farmer or Rider. It ensures that role changes are reflected in user profiles and grants corresponding permissions and functionalities.
  MICROSERVICE: user_data_store
    TYPE: database
    DESCRIPTION: This microservice is responsible for storing user-related data, including credentials, OAuth tokens, and user profiles. It also tracks user roles and supports reliable data retrieval and updates for user management functionalities.

CONTAINER NAME: insertion_management
  MICROSERVICE: insertion_handler
    TYPE: backend
    DESCRIPTION: This microservice manages the creation, modification, and deletion of product insertions by farmers. It provides the core logic for publishing new product listings, updating existing information, and removing outdated or unavailable products. It ensures that only valid and accurate information is displayed on the platform.
  MICROSERVICE: box_manager
    TYPE: backend
    DESCRIPTION: This microservice handles the addition and management of boxes to product insertions. It allows farmers to define packaging or bundling details of their products, offering additional flexibility in how products are showcased and sold to customers.
  MICROSERVICE: insertion_database
    TYPE: database
    DESCRIPTION: This microservice serves as the database for storing all insertion-related data including product details, historical change records, and metadata regarding product boxes. It ensures persistence and easy retrieval of all insertion-related information.

CONTAINER NAME: navigation
  MICROSERVICE: home_page
    TYPE: frontend
    DESCRIPTION: The microservice is responsible for rendering the home page of the platform, presenting users with an overview of available products, announcements, and featured farmers. It handles routing to other sections from the homepage.
  MICROSERVICE: farmer_page
    TYPE: frontend
    DESCRIPTION: The microservice manages the rendering of individual farmer pages, displaying detailed information about each farmer and their products. It facilitates navigation from the home page to specific farmer pages.
  MICROSERVICE: routing
    TYPE: middleware
    DESCRIPTION: This microservice handles routing logic to ensure smooth navigation and transition between home page and farmer pages as well as other related navigation tasks within the platform.

CONTAINER NAME: search_functionality
  MICROSERVICE: search_backend
    TYPE: backend
    DESCRIPTION: This microservice processes search queries from users and visitors, interacts with the search index or caching mechanism to find relevant farmer insertions, and returns search results. It may connect with external search services like Elasticsearch or Algolia to enhance the search functionality with features such as full-text search and filtering.
  MICROSERVICE: search_index
    TYPE: database
    DESCRIPTION: This microservice maintains a search index that is updated with information from the insertion_management container. It optimizes search operations by providing quick access to relevant search data.

CONTAINER NAME: cart_and_order_management
  MICROSERVICE: cart_management
    TYPE: backend
    DESCRIPTION: Handles operations related to managing the shopping cart. Enables customers to add, view, and delete items, as well as manage cart contents and view cart at any given time.
  MICROSERVICE: order_processing
    TYPE: backend
    DESCRIPTION: Facilitates the generation and processing of orders from the shopping cart. Manages order creation, payment processing through an external payment gateway, and updates order status.
  MICROSERVICE: payment_integration
    TYPE: middleware
    DESCRIPTION: Manages secure communication and transaction processing with an external payment gateway service. Ensures data integrity during payment operations.
  MICROSERVICE: order_history
    TYPE: backend
    DESCRIPTION: Provides functionality to retrieve and display previous orders for a user, enabling them to track past purchases.

CONTAINER NAME: calendar_and_subscription_management
  MICROSERVICE: calendar_service
    TYPE: backend
    DESCRIPTION: Handles displaying and managing calendar events for seasonal food offerings, allowing customers to plan purchases based on seasonal availability. Supports the booking of products directly from the calendar.
  MICROSERVICE: booking_service
    TYPE: backend
    DESCRIPTION: Manages the booking of products chosen by customers from the calendar. It records booking details such as product ID, booking date, and customer information.
  MICROSERVICE: subscription_service
    TYPE: backend
    DESCRIPTION: Manages customer subscriptions to farmers, enabling notification functionalities for any new insertions published by subscribed farmers. It also manages the list of subscribed farmers and allows customers to manage their subscriptions, including the option to unsubscribe.
  MICROSERVICE: subscription_database
    TYPE: database
    DESCRIPTION: Stores subscription data for customers, including the list of subscribed farmers, along with necessary details like farmer ID and customer ID. The storage is used to manage notification flows and subscription lists.

CONTAINER NAME: delivery_management
  MICROSERVICE: delivery_operations_service
    TYPE: backend
    DESCRIPTION: This microservice handles the core delivery operations, including managing delivery requests, selecting delivery options, and coordinating with riders. It ensures products are delivered from farmers to customers by managing logistics efficiently
  MICROSERVICE: rider_management_service
    TYPE: backend
    DESCRIPTION: Responsible for rider-specific functionalities, such as managing personal delivery pages, updating rider availability status, and tracking the status of delivered orders. It enables riders to efficiently manage their delivery tasks.
  MICROSERVICE: delivery_persistence
    TYPE: database
    DESCRIPTION: Stores delivery-related data, such as delivery requests, customer details, rider information, and order status updates. It is essential for tracking and managing logistics effectively.
  MICROSERVICE: routing_service
    TYPE: middleware
    DESCRIPTION: Interfaces with external mapping or routing APIs to provide accurate delivery route information and estimated delivery times. It optimizes delivery efficiency by ensuring accurate routing.
  MICROSERVICE: notification_service
    TYPE: middleware
    DESCRIPTION: Connects with external messaging or notification services to inform customers and riders about delivery updates and the status of delivery requests. It maintains communication flow for all stakeholders during the delivery process.

CONTAINER NAME: notification_and_feedback
  MICROSERVICE: notification_center
    TYPE: backend
    DESCRIPTION: This microservice manages the notification system for the E-Farmers platform. It stores and handles all notifications related to user interactions, order updates, and new insertions by subscribed farmers, ensuring users are consistently and promptly informed.
  MICROSERVICE: feedback_system
    TYPE: backend
    DESCRIPTION: The feedback system microservice enables users to leave comments and ratings for farmers after purchasing their products. It stores feedback data, allowing for transparent reviews that help build trust between users and farmers on the platform.
  MICROSERVICE: badge_management
    TYPE: backend
    DESCRIPTION: This microservice handles the badge system for farmers, showcasing achievements on their profile pages. It tracks and stores badges earned by farmers as a gamification element and a reputation marker to encourage better performance.
  MICROSERVICE: request_status_tracker
    TYPE: backend
    DESCRIPTION: The request status tracker microservice provides users with information about the status of their requests for booked products. It stores and updates the status, ensuring users can stay informed and better plan their actions related to bookings.

CONTAINER NAME: frontend
  MICROSERVICE: frontend
    TYPE: frontend
    DESCRIPTION: This microservice hosts and delivers the user-facing application of the E-Farmers e-commerce website. It provides a seamless and interactive interface for users including visitors, customers, farmers, and riders. The microservice is responsible for navigating through the platform, showcasing available functionalities, and facilitating interactions with the backend services to handle user registration, product insertions, searches, order processing, and more. Its design ensures responsiveness and accessibility across different devices and platforms.

