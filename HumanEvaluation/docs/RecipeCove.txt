RecipeCove Project proposed by ArchiGPT-4o :

# CONTAINERS:

## CONTAINER NAME: authentication

### USER STORIES:
1) As a visitor, I want to be able to register in the website with an external account, so that I can use an existing Google account
6) As a registered user, I want to be able to perform the login, so that I can access other system's functionalities
7) As a registered user, I want to be able to perform the logout, so that I can leave my information within the website
- PORTS: 10000:10100
### DESCRIPTION: 
The authentication container is responsible for managing all aspects of user access and security within the RecipeCove project. Its primary functions include registering users through Google account integration, handling login and logout processes, and ensuring secure access to the system's features. By allowing users to utilize existing Google accounts, this container streamlines the registration process and promotes ease of access. Once registered, users can log in to access the application's full range of functionalities, such as discovering recipes, bookmarking favorites, and managing personal profiles. Logout functionality ensures user data is protected, allowing them to securely exit the system and keep their information safe. This container plays a crucial role in maintaining the integrity and security of user interactions within the application.
### PERSISTANCE EVALUATION
The authentication container needs to store user credentials and session data to manage registration, login, and logout processes effectively. Because it facilitates registration via Google account integration, it may not store passwords locally but should securely store or access tokens that confirm authentication status. Additionally, it will need to maintain session data to track logged-in users and handle session timeouts or logouts, ensuring secure user interaction with the system.
### EXTERNAL SERVICES CONNECTIONS
Based on its purpose and user stories, the authentication container requires a connection to Google's authentication services to enable users to register and log in using their Google accounts. This connection will allow the container to verify users' credentials and manage tokens for authenticating sessions within the RecipeCove application.
### MICROSERVICES:
####MICROSERVICE: auth
- TYPE: backend
- DESCRIPTION: The auth microservice handles registration, login, and logout functionalities. It enables registration via Google account integration, utilizing Google's authentication services to streamline user onboarding and ensure secure access. For login, it verifies user credentials and manages sessions by storing and validating authentication tokens. Logout functionality is implemented to safeguard user data by terminating sessions securely.
- PORTS: 10010
- TECHNOLOGICAL SPECIFICATION
The auth microservice leverages NodeJS as its primary programming language. It uses the Express framework to build RESTful APIs for handling registration, login, and logout processes efficiently. To facilitate integration with Google's authentication services, the microservice employs the PassportJS library, specifically the Google OAuth 2.0 strategy, for seamless user authentication through Google accounts. The `jsonwebtoken` library is used for generating and managing authentication tokens, which are stored in the token_storage service. Data validation and security are further enhanced by using libraries such as `Joi` for input validation and `bcrypt` for hashing sensitive data if needed.
- SERVICE ARCHITECTURE
The service architecture adopts a layered pattern with a clear separation of responsibility across different components. The API layer handles incoming HTTP requests and routes them appropriately using Express. The authentication logic is encapsulated within a service layer that interacts with Google's authentication services using PassportJS. This layer is responsible for handling user registration, authentication, and session management, including token generation and validation. The data access layer manages interactions with the token_storage microservice, storing session-related data and retrieving tokens as required. Additionally, middleware components handle tasks such as request validation and authentication checks, ensuring only authorized access to protected resources. This architecture promotes scalability, maintainability, and security, efficiently managing user interactions within the RecipeCove application.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
POST	/auth/register	Register a user via Google account integration, returning a confirmation message and authentication token.	1
POST	/auth/login	Authenticate the user using their Google account, generating and returning a session token.	6
POST	/auth/logout	Terminate the user session by invalidating the current authentication token and returning a confirmation message.	7

#### MICROSERVICE: token_storage
- TYPE: database
- DESCRIPTION: This microservice stores and manages session data and authentication tokens. It safely stores tokens that confirm a user's authentication status and handles data related to user sessions. This allows for secure management of user access, ensuring that users remain authenticated throughout their interactions while preventing unauthorized access.
- PORTS: 10020


## CONTAINER NAME: recipe_search_and_info

### USER STORIES:
2) As a visitor, I want to be able to search a recipe by its name, so that I can search only what interests me
3) As a visitor, I want to be able to see the information of a recipe, so that I can learn more about it
4) As a visitor, I want to be able to see the information of an ingredient, so that I can know the details of each ingredient in a recipe
### PORTS: 10200:10300
### DESCRIPTION: 
The "recipe_search_and_info" container is a fundamental component of the RecipeCove web application. Its primary purpose is to facilitate users in discovering recipes and accessing detailed information about both recipes and their ingredients. This container handles the core functionality of allowing users to search for recipes by name, which caters to users who have specific recipes in mind or are looking for something particular. Additionally, it provides comprehensive information about each recipe, enabling users to delve deeper into the recipes of interest, including preparation methods and necessary ingredients. Furthermore, users can explore detailed information about individual ingredients, allowing them to understand their uses, nutritional values, and any other relevant details. This container ensures that users have a robust toolset for exploring culinary options and gaining insights into recipe components, thus enhancing their cooking and recipe discovery experience.
### PERSISTANCE EVALUATION
The "recipe_search_and_info" container does not inherently require long-term data storage as its primary function is to facilitate searching and retrieving information about recipes and ingredients. However, it may temporarily cache search results or frequently accessed recipes and ingredient details to enhance performance and reduce load times. This type of data storage would be ephemeral, possibly utilizing in-memory databases or caching mechanisms like Redis to support quick retrieval without persistent storage.
### EXTERNAL SERVICES CONNECTIONS
Given the container's purpose of providing access to a wide range of recipes and detailed ingredient information, it may need to connect to external services that provide such data. This could include accessing APIs supplied by recipe databases or ingredient information providers to gather and update recipe and ingredient details dynamically. These external connections will ensure that users are presented with the most current and comprehensive information available in the culinary domain.
### MICROSERVICES:
#### MICROSERVICE: recipe_search
- TYPE: backend
- DESCRIPTION: Handles the searching of recipes by name. It processes user search queries and interacts with external APIs to retrieve relevant recipes. It may temporarily cache search results for performance optimization.
- PORTS: 10200
- TECHNOLOGICAL SPECIFICATION
The "recipe_search_and_info" service utilizes Python as its primary programming language, with Flask as the web framework for developing RESTful APIs. Flask offers simplicity and flexibility, ideal for handling various API endpoints required for recipe searching and information retrieval. For caching, Redis is used, providing in-memory data structure support to enhance performance and reduce API query latencies. Key Python libraries include requests for external API interactions, and marshmallow for object serialization.
- SERVICE ARCHITECTURE
The service adopts a microservices architecture, with each microservice implementing a specific role, adhering to the single responsibility principle. The architecture comprises the following patterns:
- **Service Per Feature:** Each microservice is responsible for a distinct featureâ€”recipe search, recipe information retrieval, and ingredient information retrieval.
- **Externalized Configuration:** Configuration details for external API connections and caching are maintained separately and injected at runtime.
- **Cache-Aside Pattern:** The caching microservice employs this pattern to ensure that frequently accessed data is quickly available without direct database or API calls, improving system throughput.
- **API Gateway Pattern:** Although not explicitly mentioned, an API gateway can be used to route requests to the appropriate microservice, handle authentication, and aggregate results if needed, providing a unified interface to the external world.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/recipe_search	Retrieve a list of recipes based on the provided search query, leveraging external APIs and potentially caching results for enhanced performance.	2
GET	/recipe_info/<recipe_id>	Fetch detailed information about a specific recipe using its ID to provide insights into preparation methods and required ingredients.	3
GET	/ingredient_info/<ingredient_id>	Retrieve comprehensive information about a specific ingredient using its ID, including nutritional values and usage details.	4

#### MICROSERVICE: recipe_info
- TYPE: backend
- DESCRIPTION: Provides detailed information about selected recipes, including preparation methods and required ingredients. This service receives the recipe ID from the user and fetches comprehensive details from external sources.
- PORTS: 10210
- TECHNOLOGICAL SPECIFICATION
The "recipe_info" microservice will use Python as its main programming language due to its extensive library support and ease of handling HTTP requests and data processing tasks. The FastAPI framework will be employed to build high-performance, robust RESTful APIs. FastAPI is chosen for its asynchronous capabilities and fast execution, which suits the dynamic nature of queries and external API interactions in this service. Additionally, Pythonâ€™s `requests` library will be used for interacting with external APIs, while `pydantic` will manage data validation.
- SERVICE ARCHITECTURE
The "recipe_info" service architecture utilizes a layered architecture pattern, which helps separate concerns and isolates specific functionalities into manageable layers. The service includes the following layers:
1. **API Layer**: Handles incoming HTTP requests for recipe details. Built using FastAPI, it maps endpoints to controller functions.
2. **Controller Layer**: Facilitates the orchestration of incoming requests, linking API endpoints to service logic and handling any necessary parameter parsing or data format conversions.
3. **Service Layer**: Contains the business logic to process requests for detailed recipe information. It includes the logic to engage with external APIs, retrieve relevant data based on recipe IDs, and apply any necessary business rules.
4. **Integration Layer**: Responsible for communication with external services or APIs to fetch recipe and ingredient data. Uses Pythonâ€™s `requests` library for API communication.
5. **Cache Layer**: Works alongside the above layers using the middleware cache microservice. This leverages Redis for temporary in-memory data storage to speed up access times for repeated data requests.
This architecture ensures separation of concerns and modularity, allowing for easier maintenance, testing, and scalability of the "recipe_info" microservice.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/recipes/search	Search for recipes by name, returning a list of recipes that match the search query.	2
GET	/recipes/{recipe_id}	Retrieve detailed information about a specific recipe, including preparation methods and required ingredients, using the recipe ID.	3
GET	/ingredients/{ingredient_id}	Fetch detailed information about a specific ingredient, such as its uses and nutritional values, using the ingredient ID.	4

#### MICROSERVICE: ingredient_info
- TYPE: backend
- DESCRIPTION: Retrieves detailed information about individual ingredients, such as uses, nutritional values, and other attributes. It connects with external ingredient information providers to deliver up-to-date information.
- PORTS: 10220
- TECHNOLOGICAL SPECIFICATION
The microservices within the "recipe_search_and_info" container will leverage Node.js as the primary programming language due to its non-blocking, event-driven nature, which is well-suited for I/O-bound tasks and real-time applications. Each backend microservice will utilize Express.js to build robust and scalable RESTful APIs, enabling communication with external services and clients. The caching middleware will utilize Redis, a high-performance in-memory data structure store, to improve response times by temporarily storing frequently accessed data. For API interactions with external recipe and ingredient providers, libraries such as Axios will be used for HTTP requests due to their simplicity and feature-rich capabilities.
- SERVICE ARCHITECTURE
The service architecture follows a microservices pattern, where each service is dedicated to a specific functionality, enhancing modularity and scalability. The architecture comprises:
1. **Microservices Segmentation:**
- "recipe_search", "recipe_info", and "ingredient_info" are independent backend services, each handling a distinct aspect of the recipe and ingredient management. This separation of concerns allows each service to be independently developed, deployed, and scaled as needed.
2. **Middleware Integration:**
- The "cache" microservice acts as a middleware layer, implementing caching strategies using Redis. It stores frequently accessed data like search results and ingredient details to reduce response times and server load.
3. **External API Communication:**
- Each backend microservice connects to relevant external APIs to fetch up-to-date recipes and ingredient data. The architecture ensures that all API communications are handled asynchronously to maintain non-blocking operations.
4. **Load Balancing and Scalability:**
- The architecture supports load balancing across instances of services to handle varying user loads. It can easily be scaled horizontally by increasing the number of container instances of each microservice.
5. **Stateless Design:**
- The services are designed to be stateless, relying on the "cache" middleware for temporary data storage rather than persisting states. This stateless nature facilitates better scalability and fault tolerance.
This architecture ensures robust performance and flexibility, essential for handling diverse and dynamic requirements of the RecipeCove web application.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/ingredient_info/details/:ingredientId	Retrieve detailed information about a specific ingredient, including uses, nutritional values, and attributes by ingredient ID, utilizing connections with external providers for current data.	4

#### MICROSERVICE: cache
- TYPE: middleware
- DESCRIPTION: Implements caching mechanisms to store frequently accessed data temporarily to enhance performance. It may use technologies like Redis for in-memory data storage, improving retrieval speeds for search results and ingredient details.
- PORTS: 10230


## CONTAINER NAME: diet_recommendation_bot

### USER STORIES:
5) As a visitor, I want to be able to check the suggested recipes for a specific diet, so that I can be inspired in what to prepare each day
### PORTS: 10400:10500
### DESCRIPTION: 
The diet_recommendation_bot container serves as a conversational interface within the RecipeCove project, utilizing chat-BOT functionality to assist users in discovering recipes aligned with their dietary preferences. This container's primary purpose is to enhance user engagement by providing personalized recipe suggestions based on specific diets such as vegan, keto, Mediterranean, or any other dietary regime the user follows. By leveraging the chat-BOT, users can have an interactive experience that intuitively guides them to recipes tailored to their needs. The Chat-BOT's ability to understand and process different dietary requirements means it adapts its recommendations to suit various nutritional goals, inspiring users with options for daily meal preparation and helping them maintain their dietary lifestyle. Through this personalized interaction, the diet_recommendation_bot contributes to making the platform more user-friendly and enriching for those seeking inspiration or planning meals based on their unique dietary constraints.
### PERSISTANCE EVALUATION
The diet_recommendation_bot container does not inherently require persistent storage for its primary function of suggesting recipes based on dietary preferences. Its main task is to process user inputs and query existing data or external sources for recipe suggestions. However, if there is a requirement for tracking user interactions, feedback, or preferences over time to improve suggestions, this data would need to be stored. In such a case, it might benefit from integration with a persistent data store to maintain user profiles or historical interactions; however, this data would likely be managed through a separate profile management or analytics system instead of within the bot itself.
### EXTERNAL SERVICES CONNECTIONS
The diet_recommendation_bot container may need to connect to external services or datasets to access current dietary information, recipes, and nutritional content. These connections could include services providing up-to-date recipe databases, APIs for various dietary guidelines, or natural language processing (NLP) services to enhance the Chat-BOT's conversational abilities. Access to these external sources ensures the bot offers accurate and diversified recipe suggestions customized to dietary trends and user needs.
### MICROSERVICES:
#### MICROSERVICE: diet_chat_bot
- TYPE: hybrid
- DESCRIPTION: This microservice implements the chat-BOT functionality to suggest recipes based on specific dietary preferences. It interacts with users, processes their dietary inputs, and queries existing data or external sources to provide tailored recipe recommendations. It enhances user interaction by adapting to various dietary requirements and guiding users in discovering suitable recipes.
- PORTS: 10400

#### MICROSERVICE: external_data_connector
- TYPE: middleware
- DESCRIPTION: This microservice manages connections to external services or datasets required by the diet recommendation bot, such as recipe databases, dietary guidelines APIs, and NLP services. It ensures the chat-BOT has access to accurate and up-to-date information to offer diversified recipes.
- PORTS: 10410


## CONTAINER NAME: user_profile

### USER STORIES:
8) As a registered user, I want to be able to access my profile page, so that I can check my personal information
### PORTS: 10600:10700
### DESCRIPTION: 
The user_profile container is responsible for managing the personalized elements of the web application for registered users. Its primary purpose is to provide users with the functionality to view and manage their personal information within their profile page. This includes accessing their basic information, such as username and other data typically contained in a user profile. The container ensures that each user has a dedicated and secure space to manage their account details, enhancing the personalized experience of interacting with the RecipeCove system. This container is crucial for individual user engagement and helping users maintain an organized and personalized experience on the platform.
### PERSISTANCE EVALUATION
The user_profile container needs to store user data to fulfill its purpose of managing personal profiles. The data to be stored includes basic user information such as usernames, email addresses, and other profile details. This information needs to be securely stored to allow users to access and manage their personal details effectively.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's purpose and user stories, there is no immediate need for the user_profile container to connect to external services. It primarily focuses on managing and displaying user data that is stored within the system itself.
### MICROSERVICES:
#### MICROSERVICE: user_profile_manager
- TYPE: backend
- DESCRIPTION: Handles the management of user profiles, enabling users to view and update their personal information. The microservice interacts with internal storage to retrieve and persist user data securely. It exposes endpoints for accessing profile information, ensuring only authorized access is permitted.
- PORTS: 10610
- TECHNOLOGICAL SPECIFICATION
The user_profile_manager microservice utilizes Python as its programming language, leveraging the Flask framework due to its lightweight nature and capabilities in building RESTful APIs. This choice supports easy integration and interaction with user data. For handling database interactions and secure storage of user information, SQLAlchemy can be used as the ORM (Object-Relational Mapping). Security libraries such as Flask-JWT-Extended can be used to manage authentication and ensure that user data is accessed only by authorized users.
- SERVICE ARCHITECTURE
The service adopts a layered architecture pattern with a clear separation of concerns. The architecture includes a route layer for defining RESTful endpoints, a service layer for handling business logic related to profile management, and a data access layer interacting directly with the user_data_storage database microservice. This pattern facilitates maintainability, scalability, and security, ensuring that any changes in business logic or data handling can be made independently of user interface changes.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/user_profile_manager/profile	Retrieve the profile data of the currently authenticated user.	8
PUT	/user_profile_manager/profile	Update the personal information of the authenticated user in their profile.	8

#### MICROSERVICE: user_data_storage
- TYPE: database
- DESCRIPTION: A dedicated microservice for storing and retrieving basic user information, such as usernames and email addresses. It provides a secure data storage solution within the container.
- PORTS: 10620

## CONTAINER NAME: calendar_management
### USER STORIES:
9) As a registered user, I want to be able to create a Calendar, so that I can populate it with events relating recipes
10) As a registered user, I want to be able to delete a Calendar, so that I can remove the data gathered within the website
11) As a registered user, I want to be able to add an event to my Calendar, so that I can be reminded on a specific day to prepare a particular recipe
### PORTS: 10800:10900
### DESCRIPTION: 
The calendar_management container is dedicated to managing a user's calendar within the RecipeCove application, focusing specifically on activities related to recipes. Its primary purpose is to give users the ability to create, maintain, and personalize their calendars by adding events associated with their recipe-related activities. This functionality enables users to organize and plan their cooking schedule, ensuring they can set reminders for preparing specific recipes on designated dates. Additionally, it allows users to maintain control over their stored data by providing options to create new calendar entries, as well as delete calendars and associated data when no longer needed. In summary, this container enhances user engagement by providing them with the organizational tools necessary to facilitate their cooking plans within the application.
### PERSISTANCE EVALUATION
The calendar_management container needs to store data to fulfill its purpose and user stories. It must persist information related to user calendars, which includes storing the creation of new calendar instances, maintaining a list of events, details about the specific recipes associated with those events, and any other metadata associated with each calendar entry. This storage is necessary to ensure that users can access their scheduled recipe activities, modify their existing calendars, and delete them when necessary.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's purpose and user stories, there is no inherent need for the calendar_management container to connect to any external services. The activities it manages involve user-generated data within the RecipeCove application, which can be handled within the internal infrastructure without external API dependencies. However, if features such as syncing with third-party calendar services (like Google Calendar or iCal) are required in the future, connections to those external services might be necessary.
### MICROSERVICES:
#### MICROSERVICE: calendar_service
- TYPE: backend
- DESCRIPTION: This microservice is responsible for the core functionalities of calendar management, including creating, deleting, and managing calendar events related to recipes. It provides endpoints to perform these operations and interacts with the database to persist user calendar data and event information.
- PORTS: 10810
- TECHNOLOGICAL SPECIFICATION
The calendar_service microservice would be well-suited to use Python as its main programming language, paired with the Flask framework to create the RESTful API endpoints necessary for managing calendar operations. Flask is lightweight and allows for easy scalability, making it ideal for microservice architecture. To handle the persistence of user calendar data in the calendar_storage microservice, PostgreSQL would be a reliable choice due to its robustness and ability to handle complex queries, which may be necessary for efficiently retrieving and organizing calendar events.
- SERVICE ARCHITECTURE
The service architecture for the calendar_service microservice adheres to several patterns common in microservice design. It follows the Model-View-Controller (MVC) pattern by dividing the application logic into models (for handling data operations with the database), controllers (handling the HTTP request logic), and routes (defining endpoint paths). This separation of concerns enables clear organization and maintainability of the codebase. The microservice also incorporates a Repository pattern, which abstracts the database interactions, allowing for cleaner logic in the controller layer. Moreover, the service has a RESTful API design pattern, which ensures standard behaviors for create, read, update, and delete (CRUD) operations on user calendars and related events. This design promotes consistent API interactions and flexibility to accommodate future expansion or refactoring needs.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
POST	/calendar/create	Endpoint to create a new calendar for recipe-related activities, allowing users to organize their cooking plans.	9
DELETE	/calendar/delete	Endpoint to delete an existing calendar and all its associated data, enabling users to manage their stored information.	10
POST	/calendar/event	Endpoint to add an event to the user's calendar, setting reminders for preparing specific recipes on set dates.	11

#### MICROSERVICE: calendar_storage
- TYPE: database
- DESCRIPTION: This microservice handles the persistence of user calendar data. It stores information about calendar instances, events, and associated recipes, allowing for efficient retrieval and modification by the calendar_service microservice.
- PORTS: 10820

## CONTAINER NAME: favorites_management

### USER STORIES:
12) As a registered user, I want to be able to add a recipe to my favorite list, so that I can keep track of all the recipes I like
13) As a registered user, I want to be able to remove a recipe from my favorite list, so that I can stop being interested in it
14) As a registered user, I want to be able to see my favorite list, so that I can check my current interests in recipes
### PORTS: 11000:11100
### DESCRIPTION: 
The favorites_management container is responsible for managing the functionality related to users' favorite recipes within the RecipeCove web application. Its primary purpose is to allow registered users the ability to organize and track their favorite recipes easily. This includes the capability to add new recipes to their favorites list whenever they find a recipe that interests them, remove recipes they are no longer interested in, and view their complete list of saved favorites at any time. By facilitating the management of favorite recipes, this container enhances the personalized user experience, making it easy for users to keep track of and revisit recipes they enjoy or wish to try in the future.
### PERSISTANCE EVALUATION
The favorites_management container requires persistence to fulfill its purpose and the user stories associated with it. It needs to store data about each user's favorite recipes list, including adding and removing recipes to/from this list. The stored data should associate each user with their specific favorite recipes, allowing users to view their personalized favorites list. The data required includes user identifiers and recipe identifiers, ensuring that favorite recipes are accurately managed and linked to correct users.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's behavior and purpose, there is no need for the favorites_management container to connect to services provided by external providers. All required functionalities for managing users' favorite recipes lists, such as adding, removing, and viewing favorites, can be accomplished internally within the system.
### MICROSERVICES:
#### MICROSERVICE: favorites_backend
- TYPE: backend
- DESCRIPTION: This microservice is responsible for managing the backend logic related to user favorite recipes. It provides endpoints for users to add, remove, and view recipes from their favorite list. The service ensures each user's favorite recipes are stored and retrieved correctly.
- PORTS: 11010
- TECHNOLOGICAL SPECIFICATION
The `favorites_backend` microservice will employ Python as its primary programming language, with Flask being used as the web application framework to build RESTful APIs. Flask is lightweight and flexible, making it suitable for small to medium-sized applications. For database interaction, SQLAlchemy will be used to handle both SQL and ORM capabilities, allowing easy communication with the `favorites_storage` microservice that manages the database responsibilities. JSON Web Tokens (JWT) will be considered for handling any authentication needs that may arise in user-specific functionalities.
- SERVICE ARCHITECTURE
The service architecture for the `favorites_backend` microservice is designed around the Model-View-Controller (MVC) pattern to ensure separation of concerns and clear structure:
- **Model:** Utilizes SQLAlchemy models to define the data structures that interact with the database. This layer handles creating, reading, updating, and deleting information related to users' favorite recipes.
- **View:** Flask manages the routing and provides endpoints for the users. These endpoints will be responsible for receiving HTTP requests from the client, such as adding, removing, or viewing favorite recipes.
- **Controller:** Facilitates communication between the Model and View layers. It contains the business logic for managing the operations on users' favorite recipes, ensuring data is processed and transferred accordingly.
- **Service Layer:** This will hold the core application logic for managing user interactions with their favorite recipes, encapsulating the logic outside of the controller for easier testing and maintenance.
The microservice will expose a REST API with clear endpoints for managing favorite recipes, enabling a seamless and structured user experience.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
POST	/favorites/add	Add a recipe to the user's favorite list, storing the association between the user and the recipe	12
DELETE	/favorites/remove	Remove a recipe from the user's favorite list, deleting the association between the user and the recipe	13
GET	/favorites/list	Retrieve the user's current list of favorite recipes, enabling the user to view all saved favorites	14

#### MICROSERVICE: favorites_storage
- TYPE: database
- DESCRIPTION: This microservice stores data related to users' favorite recipes. It maintains a persistent record of each user's favorite list, associating user identifiers with recipe identifiers to ensure accurate storage and retrieval of favorite recipes.
- PORTS: 11020

## CONTAINER NAME: frontend

### PORTS: 11200:11300
### DESCRIPTION: 
The frontend container serves as the presentation layer of the RecipeCove web application. Its primary purpose is to host the user interface, facilitating interactions between the users and the underlying functionalities provided by other containers. It renders the website's layout, handles user inputs, and communicates with backend services to display dynamic content such as recipes, user profiles, and dietary recommendations. By managing the flow of data between the user and the system, the frontend container ensures that the application is intuitive and user-friendly, enhancing the overall user experience within the web application.
### PERSISTANCE EVALUATION
The frontend container primarily handles the presentation layer and user interface interactions, so it does not need to store data persistently. Its role is to manage the flow of information between the user and the backend services, rendering content dynamically based on data received from other containers. Therefore, any necessary data storage and management, such as user profiles or favorite recipes, should be handled by the appropriate backend containers responsible for those features.
### EXTERNAL SERVICES CONNECTIONS
Based on the frontend container's purpose of serving as the presentation layer, it does not need to directly connect to external services. Instead, it relies on backend services such as the recipe_search_and_info or user_profile containers to fetch necessary data. The backend containers themselves may handle any external service connections, such as fetching ingredients or recipe information from external APIs, while the frontend will simply display the data received.
### MICROSERVICES:
#### MICROSERVICE: user_interface
- TYPE: frontend
- DESCRIPTION: This microservice serves as the user interface for the RecipeCove web application. It is responsible for rendering the website layout, handling user inputs, and facilitating interactions with other backend services to display dynamic content such as recipes, user profiles, and dietary recommendations. It ensures the application is intuitive and user-friendly.
- PORTS: 11200
- TECHNOLOGICAL SPECIFICATION
The user_interface microservice is implemented using ReactJS, a popular JavaScript library for building user interfaces, particularly single-page applications. ReactJS is chosen for its ability to efficiently handle dynamic content rendering and its component-based architecture, which allows for modular and maintainable code. Alongside ReactJS, the service utilizes libraries such as Redux for state management, React Router for handling navigation and routing within the application, and Axios for making HTTP requests to interact with backend services. Styling is managed using CSS-in-JS solutions like Styled Components, allowing for scoped styling and dynamic theme management.
- SERVICE ARCHITECTURE
The service architecture of the user_interface microservice follows a component-based design pattern inherent to ReactJS. This pattern involves creating reusable UI components that encapsulate their own logic and rendering, leading to a modular and maintainable structure. The architecture also adopts a unidirectional data flow pattern, leveraging Redux for global state management, ensuring consistent data across the application and facilitating easy debugging. React Router is employed to manage application routing, enabling intuitive navigation between different views and components of the RecipeCove web application. The architecture is designed to support responsive and efficient rendering, with components re-rendering only when necessary based on state changes and data updates from backend services via Axios calls.
- PAGES
Page Name	Description	User Stories
Homepage	Renders the homepage layout and provides access to various components of the RecipeCove web application, such as featured recipes and user login/register links.	N/A
Recipe/<id>	Shows the recipe details, including ingredients, instructions, and dietary information, based on data fetched from backend services.	N/A
UserProfile	Displays the user profile, listing personal details, saved recipes, and dietary preferences.	N/A
DietaryRecommendations	Presents customized dietary recommendations for the user, using data from backend services.	N/A
SearchResults	Displays the search results of recipes based on user input, fetched dynamically from backend services.	N/A