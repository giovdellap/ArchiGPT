CONTAINER NAME: User_Authentication
  MICROSERVICE: user_registration
    TYPE: backend
    DESCRIPTION: This microservice handles the registration process for both customers and merchants. It validates input data, ensures that the username is unique, hashes passwords before storing them, and may send verification emails.
  MICROSERVICE: login_access
    TYPE: backend
    DESCRIPTION: This microservice manages user login for customers and merchants, validating credentials against stored data, generating authentication tokens, and providing access control.
  MICROSERVICE: profile_management
    TYPE: backend
    DESCRIPTION: This microservice offers access to user profile details for both customers and merchants. It allows users to update their information and manages data retrieval securely.
  MICROSERVICE: auth_storage
    TYPE: database
    DESCRIPTION: This microservice is responsible for securely storing user credentials, encrypted passwords, authentication tokens, and profile details such as email addresses.

CONTAINER NAME: Shopping_Cart
  MICROSERVICE: cart_management
    TYPE: backend
    DESCRIPTION: Manages core functionalities related to a customer's shopping cart, including viewing cart contents, adding items, updating quantities, and removing items. It interfaces with Product_Management for product details and prepares data for Payment_Processing during checkout.
  MICROSERVICE: cart_storage
    TYPE: database
    DESCRIPTION: Persists the shopping cart data associated with each customer, including product IDs, quantities, and any session identifiers necessary for tracking non-logged-in users' carts.

CONTAINER NAME: Product_Management
  MICROSERVICE: product_listing
    TYPE: backend
    DESCRIPTION: Handles product listing and order management for both customers and merchants. Includes functionalities for viewing and ordering products by price and retrieving product details.
  MICROSERVICE: product_search
    TYPE: backend
    DESCRIPTION: Manages search functionalities, allowing customers and merchants to retrieve products based on names entered in the search bar.
  MICROSERVICE: product_management
    TYPE: backend
    DESCRIPTION: Facilitates product management for merchants, including changing prices, inserting, and removing products.
  MICROSERVICE: product_database
    TYPE: database
    DESCRIPTION: Stores product information including product name, description, price, stock quantity, and other relevant details for use by other microservices.

CONTAINER NAME: Payment_Processing
  MICROSERVICE: payment_gateway_integration
    TYPE: backend
    DESCRIPTION: This microservice manages connections with external payment processing services such as Stripe or PayPal. It handles payment validation, authorization, and transaction execution, ensuring that payments are securely processed and funds are accurately transferred. Additionally, it connects with fraud detection services to bolster transaction security.
  MICROSERVICE: transaction_manager
    TYPE: backend
    DESCRIPTION: This microservice is responsible for managing transaction data within the payment process, handling temporary storage of payment information such as credit card details, payment amounts, and transaction IDs. It coordinates with the payment_gateway_integration service to finalize transaction status, either confirming or rejecting payments, and ensures secure data handling and disposal.

CONTAINER NAME: Order_Tracking
  MICROSERVICE: order-tracking-backend
    TYPE: backend
    DESCRIPTION: The microservice handles all backend operations related to order tracking and shipment management. It retrieves and processes order details, coordinates tracking updates, and calculates estimated delivery dates. It connects to external shipping carrier APIs to fetch real-time tracking information and ensures that such data is updated in a timely manner, providing transparency to customers.
  MICROSERVICE: tracking-storage
    TYPE: database
    DESCRIPTION: This microservice is responsible for storing all order tracking data persistently, including order IDs, tracking numbers, shipping status, and estimated delivery dates and times. It maintains a reliable and accessible database to support queries and updates necessary for tracking purposes.

CONTAINER NAME: Customer_Service
  MICROSERVICE: about_us
    TYPE: frontend
    DESCRIPTION: This microservice serves the "About Us" page, providing static company background, values, and contact information for both customers and merchants. It ensures users can easily learn more about the shop.
  MICROSERVICE: customer_inquiry
    TYPE: backend
    DESCRIPTION: This microservice handles customer inquiries, providing a channel for customers to submit questions or concerns. It may integrate with external services like email systems or CRMs to forward inquiries or keep records.

CONTAINER NAME: Session_Management
  MICROSERVICE: session_logout
    TYPE: backend
    DESCRIPTION: This microservice handles the termination of user sessions for both customers and merchants. It ensures secure and proper termination of sessions, clearing session tokens or session data stored temporarily in memory when the user clicks the logout button. The service contributes to the security and integrity of the system by efficiently managing the transition from active to inactive user states without the need for persisting data.
  MICROSERVICE: session_middleware
    TYPE: middleware
    DESCRIPTION: This microservice facilitates the communication between the session management and other containers to validate if a session needs termination. It acts as an intermediary to ensure the smooth interaction of the logout service with the rest of the system, enabling session state checks if required.

CONTAINER NAME: Frontend
  MICROSERVICE: frontend_ui
    TYPE: frontend
    DESCRIPTION: The microservice is responsible for delivering the user interface for CDC shop customers and merchants. It serves web pages and interfaces, allowing users to browse products, manage shopping carts, conduct transactions, and view order statuses. It ensures a seamless shopping experience and acts as a bridge between users and backend services by providing a responsive interface.
  MICROSERVICE: ui_communication_adapter
    TYPE: middleware
    DESCRIPTION: This microservice handles communication between the frontend interface and other internal containers like User_Authentication, Shopping_Cart, and Product_Management. It makes API calls to these services, fetches necessary data, and sends updated information back to the frontend for rendering. It ensures smooth interaction and data exchange across various services within the application.

