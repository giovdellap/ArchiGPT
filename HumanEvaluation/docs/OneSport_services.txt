CONTAINER NAME: user_authentication
  MICROSERVICE: user_auth
    TYPE: backend
    DESCRIPTION: This microservice manages user registration, login, and logout operations. It exposes endpoints for these functionalities. During registration, it securely stores encrypted user credentials. Upon login, it validates credentials and creates a session. The logout operation involves terminating the session. The microservice also facilitates account creation, authentication session management, and interaction with user profile settings.
  MICROSERVICE: profile_management
    TYPE: backend
    DESCRIPTION: This microservice handles user profile settings, allowing users to view and modify their personal information, such as email and password. It ensures that changes adhere to security standards such as password strength and email format, and provides endpoints for updating and retrieving profile information.
  MICROSERVICE: account_management
    TYPE: backend
    DESCRIPTION: This microservice enables users to delete their accounts. It handles requests to remove user data from the system, ensuring that data is permanently deleted and that users receive confirmation of account deletion actions.
  MICROSERVICE: auth_storage
    TYPE: database
    DESCRIPTION: This microservice securely stores user credentials (email and encrypted password), profile settings data, authentication session data, and account deletion requests. It ensures data integrity and security, providing necessary data retrieval and storage operations in compliance with privacy standards.
  MICROSERVICE: session_management
    TYPE: backend
    DESCRIPTION: This microservice manages user authentication sessions. It creates, validates, and terminates sessions based on user login and logout actions. It ensures session data integrity and prevents unauthorized access, maintaining active sessions while effectively managing timeout scenarios.

CONTAINER NAME: news_management
  MICROSERVICE: news_retrieval
    TYPE: backend
    DESCRIPTION: This microservice is responsible for fetching and updating recent sports news articles. It connects to an external news API to retrieve the latest news and manages a cache to improve efficiency and reduce external calls.
  MICROSERVICE: news_filtering
    TYPE: backend
    DESCRIPTION: This microservice provides filtering functionalities for sports news, allowing users to tailor their news feed according to specific countries, such as filtering for Italian news.
  MICROSERVICE: user_favorites
    TYPE: backend
    DESCRIPTION: This microservice manages users' collections of favorite news, enabling users to add news articles to their favorites, view their saved news, and remove any unwanted ones.
  MICROSERVICE: filtering_preferences
    TYPE: backend
    DESCRIPTION: This microservice deals with storing and managing user-specific preferences for news filtering, such as country or topic selections.
  MICROSERVICE: news_persistence
    TYPE: database
    DESCRIPTION: This database microservice is used for storing recent news articles, user-specific filtering preferences, and identifiers of users' favorite news articles.

CONTAINER NAME: ticket_management
  MICROSERVICE: ticket_display
    TYPE: backend
    DESCRIPTION: Handles displaying available tickets for upcoming sporting events. It manages the retrieval of ticket data from the database and presents it to users, including event names, dates, locations, prices, and availability status. Offers filtering options to narrow down ticket searches by country.
  MICROSERVICE: ticket_collection_manager
    TYPE: backend
    DESCRIPTION: Allows users to manage their collection of tickets of interest, including adding tickets to the collection for future purchase consideration and removing tickets they are no longer interested in. It handles the CRUD operations for user-specific ticket data in the database.
  MICROSERVICE: storage
    TYPE: database
    DESCRIPTION: Stores data related to available tickets, including event details, prices, and availability. Also maintains user-specific data for collected tickets of interest, facilitating efficient storage and retrieval operations.
  MICROSERVICE: external_services_connector
    TYPE: middleware
    DESCRIPTION: Handles connections to external services such as external ticket provider APIs and payment gateway APIs. Ensures real-time data fetching for ticket availability and securely facilitates transactions if purchasing processes are handled.

CONTAINER NAME: favorites_management
  MICROSERVICE: favorites_handler
    TYPE: backend
    DESCRIPTION: The microservice handles operations related to managing the user's favorite collections of news and ticket interests. It supports the functionality for users to add or remove items from their favorites and can delete all items from a user's favorite list. It interacts with the internal storage to keep track of each user's favorites and ensures data consistency across operations.
  MICROSERVICE: favorites_storage
    TYPE: database
    DESCRIPTION: This microservice is responsible for storing and retrieving records of users' favorite news articles and ticket interests. It maintains records linking users to their selected favorites, supporting efficient operations for retrieving and clearing the user's favorites list.

CONTAINER NAME: social_interaction
  MICROSERVICE: social_network
    TYPE: backend
    DESCRIPTION: This microservice manages the core functionalities of social interactions among users. It oversees sending, accepting, and deleting friend requests, checking incoming requests, removing friends from the list, and searching for other users by email. Additionally, it handles viewing and maintaining the user's friend list while ensuring the smooth operation of these social features.
  MICROSERVICE: social_db
    TYPE: database
    DESCRIPTION: This microservice is responsible for storing and managing data related to friend requests, including details such as sender, receiver, and request status. It also maintains friend lists, logs information about active and deleted friendships, and tracks user searches and interactions for auditing and analytics purposes.

CONTAINER NAME: frontend
  MICROSERVICE: ui_service
    TYPE: frontend
    DESCRIPTION: The microservice is responsible for delivering the web interface for user interactions. It encompasses the presentation of sports news, event updates, and ticket operations in a seamless and interactive manner. The service integrates with various backend services to ensure a coherent user experience and serves as the primary gateway for user engagement, maintaining a visually appealing and user-friendly design.
  MICROSERVICE: api_gateway
    TYPE: middleware
    DESCRIPTION: This microservice acts as an intermediary to route requests from the frontend to the appropriate backend services, such as user authentication, news management, ticket management, favorites management, and social interaction. It ensures that all interactions are seamless and securely managed, providing a unified API layer for the frontend to communicate with different back-end systems.

