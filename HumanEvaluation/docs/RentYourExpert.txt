RentYourExpert Project proposed by ArchiGPT-4o :

# CONTAINERS:

## CONTAINER NAME: authentication_container

### USER STORIES:
1) As a customer, I want to be able to register, so that I can have an account
2) As a customer, I want to be able to login, so that I can start using the app
13) As a customer, I want to have a specific button in the pages of the application, that allow me to logout
14) As an admin, I want to be able to login, so that I can start the management of the e-commerce
25) As a worker, I want to be able to register, so that I can have an account
26) As a worker, I want to be able to login, so that I can start using the app
### PORTS: 20000:20100
### DESCRIPTION: 
The `authentication_container` in the RentYourExpert platform is responsible for managing all aspects of user authentication and authorization. This includes handling the registration, login, and logout processes for various user roles including customers, workers, and administrators. The container ensures that each user can create an account, access their account securely through login, and log out to end their session. It also manages user roles, enabling the distinction of privileges and access levels between regular users, workers providing services, and administrators managing the platform. This container is essential for the security and accessibility of the platform, ensuring only authorized users can interact with the application. It runs on ports 20000:20100, providing a secured gateway for authentication processes.
### PERSISTANCE EVALUATION
The container needs to store user credentials to manage registration and login processes for customers, workers, and administrators. This involves securely storing usernames, passwords, and possibly security questions or recovery information. The container must also manage and store authentication tokens or session identifiers to track logged-in users and manage their sessions effectively. Additionally, role-based information would be necessary to determine the access privileges for each user type (customer, worker, admin).
### EXTERNAL SERVICES CONNECTIONS
The authentication_container may need to connect to an email or SMS service for account verification and password recovery processes, ensuring secure user registration and account management. Furthermore, integrating with an identity management service, such as OAuth providers (Google, Facebook, etc.), could be considered for supporting social login features, allowing users to register and log in using their existing accounts with these providers.
### MICROSERVICES:

#### MICROSERVICE: auth-service
- TYPE: backend
- DESCRIPTION: This microservice handles user registration, login, and logout processes. It also manages user roles and ensures secure access for different roles (customers, workers, admins). It exposes endpoints for these operations, checks credentials against stored data during login, creates and manages authentication tokens, and assigns roles based on user type.
- PORTS: 20000
- TECHNOLOGICAL SPECIFICATION
The `auth-service` will be implemented using Node.js due to its non-blocking, event-driven architecture, which is ideal for handling numerous requests efficiently. The Express framework will be utilized for building a RESTful API, facilitating the user authentication processes. For secure password handling, the bcrypt library will be employed to hash and verify passwords. JSON Web Tokens (JWT) will be used for creating and verifying authentication tokens. To manage different user roles, an access control library like RBAC or similar will be implemented. Sequelize will serve as the Object-Relational Mapping (ORM) library to interact with the database, ensuring efficient data manipulation.
- SERVICE ARCHITECTURE
The `auth-service` adopts a layered architecture pattern to separate concerns and promote maintainability. The architecture will include the following layers:
1. **API Layer**: This handles incoming HTTP requests, directs them to the appropriate controllers, and returns responses to clients. Express will manage routing here.
2. **Controller Layer**: Controllers process requests, apply necessary business logic, and call the appropriate service functions. They ensure user inputs are validated and sanitized.
3. **Service Layer**: Contains the core business logic related to authentication and authorization (e.g., registering users, logging in/out, and role management). This layer interacts with the data layer to perform CRUD operations.
4. **Data Access Layer**: Manages direct interactions with the database using Sequelize. This layer is responsible for retrieving, saving, updating, and deleting user credentials, tokens, and roles.
5. **Security Layer**: Incorporates JWT and bcrypt functionalities to manage authentication tokens and secure password storage.
The use of JWT allows for easy separation between authentication and authorization concerns, facilitating integration with external identity providers. Role-based access control is implemented within the service layer to manage user permissions effectively.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
POST	/auth-service/register	Register a new user (customer or worker), saving credentials and role-based information, returning confirmation of account creation.	1, 25
POST	/auth-service/login	Authenticate a user (customer, worker, or admin) by verifying credentials, generating a JWT token and returning it for session management.	2, 14, 26
POST	/auth-service/logout	Invalidate a user's session by removing the JWT token, effectively logging the user out and returning a confirmation message.	13

#### MICROSERVICE: auth-db
- TYPE: database
- DESCRIPTION: This microservice stores user credentials, authentication tokens, and user roles. It securely manages data like usernames, passwords, and possibly security questions. It plays a crucial role in supporting registration and login processes by maintaining user data and roles.
- PORTS: 20010


## CONTAINER NAME: user_profile_management

###USER STORIES:
3) As a customer, I want to be able to have access to my profile, so that I can look at my information
27) As a worker, I want to be able to have access to my profile, so that I can look at my information
28) As a worker, I want to be able to modify my information
32) As a customer, I want to be able to modify my information
### PORTS: 20200:20300
### DESCRIPTION: 
The user_profile_management container is responsible for handling the access and management of profiles for different user types, namely customers, workers, and admins on the RentYourExpert platform. This container serves several essential purposes:
1. **Profile Access**: It allows users, specifically customers and workers, to access their profile information. This includes viewing their stored data such as name, contact details, and any other pertinent information they may need to refer to or confirm.
2. **Profile Modification**: The container provides functionalities enabling users to modify their profile information. Customers and workers can update or change their existing details, ensuring that their profiles stay current and accurate. This feature is crucial for maintaining up-to-date records which is integral to effective communication and service delivery on the platform.
3. **Administrative Features**: While focused on customer and worker profiles, this container also implies support for administrative oversight. Although not explicitly detailed in the provided user stories, maintaining a streamlined and manageable profile system aids in overall user management, indirectly supporting admin roles.
By managing these profile-related tasks efficiently, the user_profile_management container plays a vital role in ensuring a smooth and intuitive user experience, making it easy for all users to maintain and manage their information on the platform. This is crucial for facilitating the personalized service RentYourExpert aims to provide, fostering user trust and service reliability.
### PERSISTANCE EVALUATION
The user_profile_management container needs to store data to fulfill its purpose and user stories. This includes storing profile information for customers, workers, and potentially admins. Data to be stored would likely include names, contact details, profile pictures (if applicable), professional roles or affiliations, and potentially preferences or user-specific settings. Additionally, any changes or modifications made by users to their profiles must be persisted to ensure profiles are kept current and accurate. Persisting this information is crucial for both viewing and modifying profile data as required by the user stories.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's purpose and user stories, it does not inherently require connections to external service providers. However, to enrich user profiles, optional integrations with external services such as social media platforms for profile pictures or identity verification services might be considered to enhance user trust and streamline signing up processes. These services are not a direct necessity for achieving the core functionalities described but could add value to user profile management if implemented.
### MICROSERVICES:

#### MICROSERVICE: profile_access
- TYPE: backend
- DESCRIPTION: This microservice allows users to access and view their profiles, including pertinent information such as names, contact details, and potentially other user-specific settings.
- PORTS: 20210
- TECHNOLOGICAL SPECIFICATION
For the backend microservices, Node.js is selected for its non-blocking I/O and scalability, which are advantageous for handling multiple users concurrently. Express.js will be used as the web application framework to facilitate the creation of RESTful API endpoints efficiently. For the "profile_access" microservice, the dependencies will include libraries such as `cors` for handling cross-origin requests and `dotenv` for managing environment configurations. For the "profile_modification" microservice, libraries like `joi` for data validation and `bcrypt` for hashing sensitive user information (if needed for modification) would be crucial. The "profile_storage" microservice utilizes a PostgreSQL database, accessed via the `pg` library within Node.js, providing a robust and secure data persistence mechanism. This is chosen for its reliability and advanced querying capabilities, which are beneficial for handling relational data such as user profiles.
- SERVICE ARCHITECTURE
The service architecture employs a microservices pattern, where each microservice is responsible for specific functionality within the user_profile_management domain. "Profile_access" and "profile_modification" microservices follow the Controller-Service-Repository pattern. The controllers will handle incoming HTTP requests, invoking service components that embody business logic, which in turn will interact with the repository layer responsible for communication with the "profile_storage" microservice.
The "profile_storage" microservice aligns with the Database-Per-Service pattern, encapsulating data storage logic and providing CRUD operations on profile data. This segregation ensures a clear boundary between interaction and data persistence.
Inter-service communication between "profile_access," "profile_modification," and "profile_storage" will utilize HTTP RESTful requests, promoting a loosely coupled architecture. Each microservice listens on its dedicated port, ensuring independent deployments and scalability. The architecture supports eventual external integration capabilities by incorporating potential endpoints for third-party services if needed, although not immediately utilized.
Additionally, this separation ensures maintainability, where individual services can be tested, deployed, and scaled independently, accommodating potential future growth or changes in the platform's user profile management features.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/profile_access/customer	Retrieve and display the profile information for a customer, providing access to their stored details.	3
GET	/profile_access/worker	Retrieve and display the profile information for a worker, allowing them to view their stored details.	27
PUT	/profile_modification/customer	Update and modify the profile information for a customer based on the input data.	32
PUT	/profile_modification/worker	Enable a worker to update and modify their profile information, ensuring accuracy and currency of the details.	28

#### MICROSERVICE: profile_modification
- TYPE: backend
- DESCRIPTION: This microservice enables users to update and modify their profile information, ensuring their details are current and accurate.
- PORTS: 20220
- TECHNOLOGICAL SPECIFICATION
The `profile_modification` microservice will use Node.js as its primary language due to its event-driven architecture and efficiency in handling I/O operations, which is ideal for web services. Express.js will serve as the web application framework to create RESTful APIs efficiently. For interacting with the database, Sequelize, an ORM (Object-Relational Mapping) for Node.js, will be used to facilitate data management operations while abstracting the complexities of raw SQL queries. Additional libraries such as Joi for data validation and Winston for logging might be integrated to ensure robust data handling and effective error logging.
- SERVICE ARCHITECTURE
The service architecture adopts the following patterns:
1. **Model-View-Controller (MVC) Architecture**: This pattern structures the code into three main components—Model, which interacts with the profile storage database; View, encapsulated within API responses; and Controller, which handles user requests and modifies model data as needed, segregating the business logic.
2. **Repository Pattern**: This pattern will be used in the data access layer to ensure loose coupling between the business logic and data source logic. The repository will act as a mediator between the business logic layer and the data source layer, providing an interface to access data stored in the database.
3. **Decorator Pattern**: To handle data validation and potentially extend functionalities, decorators could be leveraged to add layers of processing around data access or transformation without modifying the core structure of requests and responses.
4. **Circuit Breaker Pattern**: For interactions with optional external services (e.g., social media for profile pictures), a circuit breaker pattern may be implemented to prevent the system from sending requests to a failing service repeatedly, thus maintaining system resilience and reliability.
By adopting these architectural patterns, the `profile_modification` microservice will be designed to offer a flexible, maintainable, and scalable framework that effectively supports profile updating functionalities while promoting separation of concerns, efficient data handling, and optional extensibility with external integrations.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/profiles/customer/:id	Fetch and display the profile information for a given customer, allowing them to view their stored data.	3
GET	/profiles/worker/:id	Fetch and display the profile information for a given worker, allowing them to view their stored data.	27
PATCH	/profiles/customer/:id	Enable a customer to update their profile information, ensuring their details are current and accurate.	32
PATCH	/profiles/worker/:id	Enable a worker to update their profile information, ensuring their details are current and accurate.	28

####MICROSERVICE: profile_storage
- TYPE: database
- DESCRIPTION: This microservice stores profile information for customers, workers, and potentially admins, ensuring all profile data is persisted for both access and modification.
- PORTS: 20230


## CONTAINER NAME: catalogue_and_worker_management

### USER STORIES:
4) As a customer, I want to be able to have access to the catalogue, so that I can see all available workers
5) As a customer, I want to be able to have access to the page of each single worker, so that I can have all information related to him
19) As an admin, I want to be able to access to the workers list, so that I can see all the workers
20) As an admin, I want to be able to access to the profile page of each single worker, so that I can have information related to that specific worker
29) As an admin, I want to have an add worker Button, so that I can generate new workers
30) As an admin, I want to have a delete worker Button, so that I can delete that worker
### PORTS: 20400:20500
### DESCRIPTION: 
The catalogue_and_worker_management container serves as the backbone for managing the platform's collection of skilled professionals and individual worker profiles. Its primary purpose is to provide both customers and admins with access to a comprehensive catalogue of available workers, showcasing their skills, expertise, and personal details. This container facilitates seamless browsing and exploration of worker profiles for customers, enabling them to make informed choices when seeking expert services.
For admins, the container offers robust management capabilities, allowing the creation and deletion of worker profiles. This feature ensures that the platform remains up-to-date with the most relevant and qualified professionals. Admins can also meticulously review the profiles of individual workers, making necessary adjustments and ensuring the accuracy and integrity of the information presented.
By fulfilling these functions, the catalogue_and_worker_management container plays a pivotal role in maintaining an organized and dynamic roster of professionals, ultimately enhancing the user experience for both customers and administrative users. It integrates functionalities that satisfy user stories related to accessing worker catalogues and profiles, as well as supporting administrative tasks around managing worker accounts. This container ensures that interactions between customers and workers are efficient and based on reliable, comprehensive information.
### PERSISTANCE EVALUATION
The catalogue_and_worker_management container requires persisting data to fulfill its purpose and user stories. It will need to store information related to the workers, including their profiles, skills, expertise, and personal details to present in the catalogue. The data should support the browsing functionality for customers and the administration tasks for creating, updating, and deleting worker profiles by admins. It is important to ensure the accuracy and integrity of stored information to facilitate informed decision-making by customers and effective management by admins.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's purpose and user stories, there is no need for the catalogue_and_worker_management container to connect to external services. All functionality revolves around internal management and access to worker data within the system.
### MICROSERVICES:
#### MICROSERVICE: worker_catalogue
- TYPE: backend
- DESCRIPTION: This microservice manages the catalog of workers, enabling customers to browse through the list of available professionals. It handles requests for fetching workers' details and enables users to view individual worker profiles, showcasing their skills and expertise.
- PORTS: 20400
- TECHNOLOGICAL SPECIFICATION
For both the `worker_catalogue` and `worker_management` microservices, the programming language chosen is Python due to its readability and extensive library support for web development, making it a great fit for backend services. Flask is selected as the web framework because it is lightweight and allows for rapid development of web applications and RESTful APIs, which is ideal for handling the various HTTP requests required by these services. Additionally, SQLAlchemy is used as an ORM (Object Relational Mapping) library to interact with the `worker_storage` database microservice efficiently. For data validation, Flask-WTF could be employed to handle form submissions, especially for the admin functionalities like adding and deleting workers. For the `worker_storage` microservice, a PostgreSQL database is used due to its robustness and capability to handle complex queries, which is essential for maintaining the integrity and accuracy of worker data.
- SERVICE ARCHITECTURE
The `worker_catalogue` and `worker_management` microservices both adopt a layered architecture pattern that separates concerns across different layers, therefore improving maintainability and scalability. This approach includes the following layers:
1. **Presentation Layer (Routes):** This layer handles incoming requests, maps them to the appropriate service operations, and returns responses. It directly interacts with the endpoints exposed by the Flask web framework.
2. **Service Layer (Controller/Handlers):** This layer implements the core functionalities required by the routes, coordinating the application's execution by invoking necessary business logic operations. It also handles any validation and checks necessary for operations.
3. **Data Access Layer:** This layer handles the interaction with the `worker_storage` database. With SQLAlchemy, this layer includes models representing the database schema and query methods to perform CRUD operations on worker data.
Both services incorporate the MVC (Model-View-Controller) pattern within their design to facilitate the separation of logic and presentation in handling user interfaces. The services are built with scalability in mind, ensuring they can handle increased load by deploying additional instances in Docker containers as needed. Each microservice follows a RESTful approach, providing a well-defined interface for performing operations on worker data through clear and standardized endpoints. Data consistency and integrity are ensured by strict validation procedures and transactional handling at the database level.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/workers	Retrieve a list of all available workers for customers and admins to browse.	4, 19
GET	/workers/{worker_id}	Fetch the detailed profile of a specific worker, showcasing skills and expertise.	5, 20
POST	/workers	Create a new worker profile, adding them to the list of professionals available on the platform.	29
DELETE	/workers/{worker_id}	Delete a specific worker profile from the platform, removing them from the catalogue.	30

#### MICROSERVICE: worker_management
- TYPE: backend
- DESCRIPTION: This microservice manages the administrative functionalities for worker profiles. It provides features for admins to add, update, and delete worker profiles, ensuring only the most relevant and qualified professionals are listed on the platform.
- PORTS: 20410
- TECHNOLOGICAL SPECIFICATION
The worker_catalogue and worker_management microservices will utilize Node.js as the primary programming language due to its event-driven architecture that is suitable for I/O-heavy operations like fetching and updating profiles. The Express.js framework will serve as the back-end web application framework to handle RESTful API requests efficiently. For data validation and schema management, the Joi library will be used to ensure data integrity and adherence to defined structures. Meanwhile, the worker_storage microservice will employ PostgreSQL as the database technology for its robust support of relational data and data consistency. The Sequelize ORM will be leveraged in conjunction with PostgreSQL to facilitate interaction between Node.js and the database.
- SERVICE ARCHITECTURE
The service architecture will adopt a microservices pattern, with a clear delineation of responsibilities among the microservices.
The worker_catalogue and worker_management services will follow a Controller-Service-Repository pattern to organize the codebase. The Controller will handle API requests and responses, delegating business logic to the Service layer. The Service layer will act as an intermediary between the Controller and the Repository, ensuring business rules and data processing are correctly managed. The Repository will handle database interactions, benefiting from Sequelize's ORM capabilities to write and query data efficiently.
The worker_storage microservice will act as the primary data store and utilize a Database Per Service pattern, ensuring that each microservice maintaining worker-related data has exclusive access, thus assisting in fault isolation and scalability. This microservice will ensure ACID (Atomicity, Consistency, Isolation, Durability) principles are upheld in managing workers' profiles and details.
These design patterns promote modularity, loose coupling, and ease of maintenance across the services, while the adoption of RESTful APIs encourages scalability and potential future integration with other systems or services.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/workers/catalogue	Retrieve a comprehensive catalogue of all available workers for customers to browse through.	4
GET	/workers/profile/:workerId	Fetch detailed information about a specific worker, including skills and personal details, as requested by a user.	5, 20
GET	/admins/workers/list	Allow admins to access the entire list of workers, enabling oversight and management of available professionals.	19
POST	/admins/workers/add	Enable admins to add new worker profiles to the platform, updating the catalogue with fresh talents.	29
DELETE	/admins/workers/delete/:workerId	Allow admins to remove worker profiles from the platform, ensuring the catalogue remains relevant and up to date.	30

#### MICROSERVICE: worker_storage
- TYPE: database
- DESCRIPTION: This microservice hosts and manages the persistence of data related to workers, including their profiles, skills, expertise, and personal details. It ensures the accuracy and integrity of this information for seamless browsing and administrative functions.
- PORTS: 20420


## CONTAINER NAME: communication_qna

### USER STORIES:
9) As a customer, I want to be able to see the questions made by other customers to a specific worker, so that I can have other information related to him
10) As a customer, I want to have a field of text in the worker's page, in order to be able to send questions to the expert
33) As a worker, I want to be able to answer to the questions made by the customers to me
34) As an admin, I want to be able to delete a question with his relative answers, in order to be able to handle them
### PORTS: 20600:20700
### DESCRIPTION: 
The `communication_qna` container is designed to facilitate effective communication between customers and workers through a Q&A system on the RentYourExpert platform. Its primary purpose is to enhance the interaction between users by allowing customers to ask questions directly to workers on their profile pages and enabling workers to respond accordingly. This container manages the display of questions previously asked by other customers, which can aid new clients in gaining insights about a worker's expertise. Additionally, it grants administrative users the capability to moderate content by allowing the deletion of questions and their associated answers when necessary. Overall, this container plays a pivotal role in ensuring smooth and transparent communication, helping users make more informed hiring decisions and fostering a comprehensive understanding of service offerings.
### PERSISTANCE EVALUATION
The `communication_qna` container requires data storage capabilities to fulfill its purpose and user stories. It needs to store questions posted by customers, answers provided by workers, and any associated metadata (such as timestamps, user IDs, and worker IDs). Additionally, there must be records to track deleted questions and answers by admins to ensure accuracy and consistency in communication history and moderation tasks.
### EXTERNAL SERVICES CONNECTIONS
Based on the purpose and user stories of the `communication_qna` container, there is no direct need for external service connections. The container's functions, such as storing and displaying Q&A content, are managed internally within the platform's infrastructure. However, it might benefit from connecting to a third-party service for content moderation or filtering if needed in the future.
### MICROSERVICES:
#### MICROSERVICE: qna_backend
- TYPE: backend
- DESCRIPTION: This microservice manages the core logic for the Q&A system. It handles the creation, retrieval, and deletion of questions and answers, ensuring smooth communication between customers and workers. It allows customers to post questions and workers to respond while providing administrative options to delete content.
- PORTS: 20610
- TECHNOLOGICAL SPECIFICATION
The `qna_backend` microservice will use Python as its primary programming language. The Flask framework will be employed to create a lightweight, RESTful API server due to its simplicity in creating scalable and maintainable services. Flask extensions such as Flask-CORS for handling cross-origin requests and Flask-SQLAlchemy for ORM purposes will be utilized to enhance functionality and ease integration with the `qna_storage` database. The microservice will also incorporate JWT (JSON Web Tokens) for secure user authentication and authorization to ensure that only authenticated users can interact with the Q&A content.
- SERVICE ARCHITECTURE
The `qna_backend` service will adopt a layered architecture pattern. The architecture will include distinct layers: the presentation layer, which handles HTTP requests and responses using Flask routes; a service layer, which contains the business logic for managing Q&A operations such as posting, retrieving, and deleting content; and a data access layer, which interacts directly with the `qna_storage` microservice to read and write data. This separation of concerns ensures modularity, making the service easier to maintain and extend. Additionally, there will be an admin component within the service layer that interfaces with the `qna_admin` middleware to handle content moderation and deletion commands effectively.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/questions/<worker_id>	Retrieve all questions asked to a specific worker to provide potential clients with additional insights into the worker's expertise.	9
POST	/questions/<worker_id>	Allow a customer to post a new question to a specific worker on their profile page.	10
POST	/answers/<question_id>	Enable a worker to respond to a specific customer's question, enhancing two-way communication.	33
DELETE	/questions/<question_id>	Allow an admin to remove a question along with its answers for moderation purposes, maintaining the quality of communication on the platform.	34

#### MICROSERVICE: qna_storage
- TYPE: database
- DESCRIPTION: This microservice is responsible for storing data related to the Q&A interactions. It holds questions and answers along with metadata, such as timestamps and user IDs, ensuring a reliable repository for communication history and moderation tasks
- PORTS: 20620

#### MICROSERVICE: qna_admin
- TYPE: middleware
- DESCRIPTION: This microservice provides administrative capabilities for the Q&A system. It handles operations related to content moderation, including the deletion of inappropriate or irrelevant questions and answers, thus maintaining the quality of communication on the platform.
- PORTS: 20630


## CONTAINER NAME: review_management

### USER STORIES:
11) As a customer, I want to be able to leave a review, in order to evaluate the performance that I received
12) As a customer, I want to have specific buttons attached to the review that I posted, in order to update or delete it.
31) As an admin, I want to be able to delete a review, in order to be able to handle them
35) As a customer, I want access to a worker's review section, so that I can read reviews left by other customers about the worker
### PORTS: 20800:20900
### DESCRIPTION: 
The review_management container is dedicated to handling the review system on the RentYourExpert platform. Its primary purpose is to facilitate customers in leaving feedback about the performance and services provided by workers they have engaged. This container enables customers to create new reviews, read existing reviews, and update or delete their own reviews to reflect changes in opinions or errors in initial submissions.
Furthermore, the review_management container provides functionality for viewing reviews, allowing potential clients to make informed decisions by accessing past evaluations of a worker's services. The container also includes features that enable admins to moderate the review content by deleting any inappropriate or misleading reviews, ensuring the integrity and reliability of the feedback system.
Overall, the container plays a crucial role in maintaining a transparent and accountable environment where customers can share their experiences and help others assess the quality of service offered by workers on the platform.
### PERSISTANCE EVALUATION
The review_management container requires persistance to manage customer reviews effectively. It needs to store review data which includes the review content, associated metadata like the reviewer's ID, the worker's ID, timestamps for the review's creation and any updates, as well as flags for keeping track of deleted or modified reviews. This allows for the reviews to be accessed, updated, or erased as needed. The storage of these reviews is essential to enable customers to consistently view and modify their feedback on the platform, as well as for admins to maintain the integrity of posted reviews.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's purpose and described user stories, the review_management container does not necessitate connections to external services. Its functionality revolves around data management within the platform, such as creation, updating, and deletion of reviews, without requiring services from external providers to fulfill its role.
### MICROSERVICES:
#### MICROSERVICE: review_management_service
- TYPE: backend
- DESCRIPTION: This microservice handles the creation, reading, updating, and deletion of reviews by customers about workers. It exposes endpoints for customers to leave feedback, view existing reviews, update their reviews, and delete them if necessary. It provides functionality for admins to moderate reviews by allowing them to delete inappropriate or biased content.
- PORTS: 20800
- TECHNOLOGICAL SPECIFICATION
The review_management_service microservice is developed using Python as the main programming language, leveraging the Flask framework to build RESTful APIs that handle review-related operations. Flask is chosen for its lightweight nature and flexibility in rapid development. The service may make use of libraries such as SQLAlchemy for ORM (Object-Relational Mapping), enabling smooth interaction with the underlying database managed by the review_store microservice. Additionally, Marshmallow can be used for object serialization and validation, ensuring that the data exchanged between the frontend and backend follows the required structure and constraints.
- SERVICE ARCHITECTURE
The service architecture of the review_management_service adopts the Model-View-Controller (MVC) pattern. This structure distinguishes database interactions, user input, and application logic in the following way:
- Models: The data layer utilizes SQLAlchemy models to represent review-related entities, encapsulating the review's data attributes and their relationships.
- Views: Flask routes act as the controller entry points for incoming HTTP requests, handling user interactions by invoking appropriate service methods.
- Controllers: The service implements controllers responsible for processing business logic, such as creating, updating, deleting, and retrieving reviews before interacting with the model.
- Furthermore, the service includes middleware for user authentication and request validation to ensure that only authenticated users can perform operations relevant to their access level (such as customers and admins).
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
POST	/reviews	Create a new review by a customer for a worker, storing the review data in the system.	11
GET	/reviews/worker/<worker_id>	Retrieve the list of reviews associated with a specific worker to allow customers to assess the worker's services.	35
PUT	/reviews/<review_id>	Update the content of an existing review by the customer who posted it, reflecting any changes in opinions or correcting errors.	12
DELETE	/reviews/<review_id>	Delete a specific review, either by the customer who posted it or by an admin for moderation purposes.	12, 31

#### MICROSERVICE: review_store
- TYPE: database
- DESCRIPTION: This microservice is responsible for storing all review-related data including review content, reviewer's ID, worker's ID, timestamps for creation and updates, and a flag status for deleted or modified reviews. It ensures the persistence of reviews within the platform.
- PORTS: 20820


## CONTAINER NAME: request_management

### USER STORIES:
6) As a customer, I want to be able to send a request to a worker, so that I can rent his expertise
7) As a customer, I want to be able to see a list of requests in my profile page, so that I can see all the requests that I did
8) As a customer, I want to have a specific button attached to my request, so that I can delete it
21) As an admin, I want to be able to access to the requests page, so that I can see each request done so far
22) As an admin, I want to be able to add or delete a request, in order to be able to handle them
23) As a worker, I want to have a requests page, so that I can look at all my requests
24) As a worker, I want to manage requests, in order to be able to accept or reject them
### PORTS: 21000:21100
### DESCRIPTION: 
The "request_management" container is dedicated to handling the processes related to the creation, listing, modification, and deletion of service requests on the RentYourExpert platform. It allows customers to send requests to skilled professionals (workers), fostering interactions for hiring services. This container is responsible for maintaining a list of requests that customers have made, enabling them to view and manage their submissions directly from their profiles. It also empowers admins with oversight capabilities, providing them the ability to access, add, or remove requests as needed to efficiently manage the platform's operations.
Moreover, the "request_management" container supports workers by giving them access to a list of requests directed at them. Workers can manage these requests by either accepting them, indicating their availability for the job, or rejecting them, thus enabling better control over their workload. By facilitating these core functions, this container plays a crucial role in ensuring the seamless interaction between customers, workers, and admins within the system. Additionally, it enables a streamlined process for users to engage with the platform's services, leading to a more efficient request and fulfillment cycle.
### PERSISTANCE EVALUATION
The "request_management" container needs to store data related to customer requests in order to fulfill its purpose and user stories. This includes the details of each request sent by customers to workers, as well as the status and history of those requests. Data to be stored should encompass the following:
- Request details (e.g., service required, description, date, status)
- Customer information associated with each request
- Worker information linked to requests
- History of requests, including modifications and deletions
- Administrative changes to the requests
Maintaining this data allows both customers and workers to manage requests effectively and enables admins to oversee and manage the request interactions on the platform.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's behaviour and purpose, there is no inherent need for the "request_management" container to connect to external services. The interactions it facilitates occur within the platform among users, workers, and admins. Consequently, the functions of creating, managing, and storing requests do not require data or services from external providers.
### MICROSERVICES:
#### MICROSERVICE: request_handler
- TYPE: backend
- DESCRIPTION: Handles the creation, listing, modification, and deletion of service requests on the platform. This microservice manages customer requests and allows both customers and workers to manage their respective requests. It also provides admins with access to view, add, or remove requests as needed.
- PORTS: 21010
- TECHNOLOGICAL SPECIFICATION
The "request_handler" microservice will be developed using the Python programming language, leveraging the Flask framework to build RESTful APIs. Flask is lightweight and flexible, ideal for rapid development and suitable for backend processes that focus on implementing business logic and handling HTTP requests. For interacting with the "request_storage" database microservice, SQLAlchemy, a SQL toolkit and Object-Relational Mapping (ORM) library for Python, will be utilized. This will abstract database operations and enable seamless interaction with the relational database. For request validation and serialization, the Marshmallow library will be employed.
- SERVICE ARCHITECTURE
The service adopts the Model-View-Controller (MVC) pattern to ensure clear separation of concerns, enhancing maintainability and scalability. In this architecture:
1. **Model**: This component represents the domain model, which includes the structure and relationships of the data entities the microservice will manage. The SQLAlchemy ORM layer will handle data models representing requests, users, and their attributes, enabling smooth database interactions.
2. **View**: The view in this pattern corresponds to the controller's responsibility in traditional MVC, acting as an intermediary for handling HTTP requests and responses. Flask's routing capabilities facilitate easy mapping of URLs to view functions that process client requests, invoke processing logic, and return API responses.
3. **Controller**: The controller processes user inputs by orchestrating model interactions and returning responses. Services or controllers invoke business logic and ensure that user actions translate into state changes. Business logic related to request creation, modification, deletion, and status updates are handled here.
4. **Decorator Pattern**: The service incorporates decorators to control access and manage permissions, particularly for distinguishing between admins, customers, and workers’ interactions with endpoints.
5. **Data Access Layer**: The repository pattern encapsulates data access logic separately from the business logic, providing a cleaner structure for managing CRUD operations tied to the "request_storage" database microservice.
By adopting these design patterns, the microservice ensures a robust and easily extensible architecture that aligns with the platform's operational needs.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
POST	/requests	Create a new service request from a customer to a worker, allowing customers to send requests for hiring services.	6
GET	/requests/customer	Retrieve a list of all requests made by the customer, displaying their requests on the profile page.	7
DELETE	/requests/:request_id	Allow customers to delete their specific request, providing control over their request submissions.	8
GET	/admin/requests	Provide admins access to see all requests on the platform, aiding in oversight of submissions.	21
POST	/admin/requests	Allow admins to add requests to the platform, assisting in platform management.	22
DELETE	/admin/requests/:request_id	Enable admins to delete specific requests, maintaining control over platform operations.	22
GET	/requests/worker	Enable workers to view all requests directed to them, allowing them to manage potential service engagements.	23
PUT	/requests/:request_id	Allow workers to accept or reject requests, facilitating management of their workload and availability.	24

#### MICROSERVICE: request_storage
- TYPE: database
- DESCRIPTION: Stores data related to customer requests, including request details, related customer and worker information, and the status and history of requests. This microservice serves as the data persistence layer for the "request_management" functionalities.
- PORTS: 21020


## CONTAINER NAME: admin_customer_management

### USER STORIES:
15) As an admin, I want to be able to access to the customers list, so that I can see all the customers
16) As an admin, I want to have an add customer Button, so that I can generate new customers
17) As an admin, I want to be able to access to the profile page of each single customer, so that I can have information related to that specific customer
18) As an admin, I want to have a delete customer button, so that I can delete that customer
### PORTS: 21200:21300
### DESCRIPTION: 
The admin_customer_management container is essential in providing administrative capabilities for managing customer accounts on the RentYourExpert platform. Its primary responsibilities involve allowing admins to efficiently handle customer-related data and accounts. This includes accessing and viewing the full list of customers to oversee and maintain a comprehensive overview of all users. Additionally, the container enables admins to generate new customer accounts through an "add customer" feature, facilitating the onboarding process.
Moreover, the container offers the ability to access individual customer profiles, providing detailed information about each customer to the admin. This functionality supports informed decision-making regarding customer support and account management. Lastly, it includes a "delete customer" button, which empowers the admin to remove customer accounts from the system, thereby maintaining the platform's integrity and ensuring compliance with data management policies. Overall, the admin_customer_management container is vital for the effective governance and oversight of customer interactions on the platform.
### PERSISTANCE EVALUATION
The admin_customer_management container needs to store data to fulfill its purpose and user stories. Specifically, it should manage a database to keep a list of customers and their profile data. This data will include customer names, contact information, and other relevant details that an admin needs to view or manage accounts. Additionally, a log of actions taken by admins on customer accounts, such as additions or deletions, should be stored for auditing purposes. This ensures traceability and compliance with data management policies.
### EXTERNAL SERVICES CONNECTIONS
Based on the container's purpose and user stories, there is no explicit requirement for the container to connect to external services. The functionalities described can be accomplished internally within the system. However, if there are any specific integrations needed for customer verification or additional data enrichment, it may require connections to external APIs. Otherwise, the container is self-sufficient in managing the described administrative tasks.
### MICROSERVICES:
#### MICROSERVICE: admin_management
- TYPE: backend
- DESCRIPTION: This microservice handles administrative functions for customer management. It provides capabilities to admins for accessing and managing customer lists and their profiles. Admins can add new customers, access details of individual customer profiles, and securely delete customer accounts. The microservice ensures traceability by logging any actions performed on customer data.
- PORTS: 21210
- TECHNOLOGICAL SPECIFICATION
The admin_management microservice uses Python as its main programming language, leveraging the Flask framework to build a lightweight, RESTful API for handling administrative functions. Flask-RESTful will be used to facilitate the development of the API endpoints, and SQLAlchemy will be adopted as the Object-Relational Mapping (ORM) tool to interact with the database. Additionally, for security purposes and to manage admin sessions, Flask-JWT-Extended will be employed to handle JSON Web Tokens (JWT). For logging and traceability, the library `python-logstash` will be integrated to ensure the actions performed on customer data are properly recorded.
- SERVICE ARCHITECTURE
The service architecture follows the Model-View-Controller (MVC) pattern to effectively separate concerns. The Controller layer is responsible for managing incoming HTTP requests and orchestrates the flow of data. It interacts with the Model layer, which uses SQLAlchemy to interface with the customer_storage microservice (database) for data persistence. For customer data actions like add, view, and delete, the Controller ensures that the operations are authorized and tracked. The View layer is primarily concerned with constructing HTTP responses and error handling. The architecture also incorporates an aspect-oriented approach to logging, utilizing decorators to log admin actions in a concise and reusable manner. Additionally, the microservice architecture allows the admin_management microservice to operate independently, while using synchronous RESTful communication with customer_storage to maintain and update the customer data.
- ENDPOINTS
HTTP Method	Endpoint URL	Description	User Stories
GET	/admin/customers	Retrieve the full list of customers to provide the admin with a comprehensive overview of users	15
POST	/admin/customers	Add a new customer to the platform, supporting the onboarding process and expanding the customer base	16
GET	/admin/customers/{customer_id}	Access detailed information about a specific customer profile to support informed decision-making	17
DELETE	/admin/customers/{customer_id}	Remove a customer account from the system, ensuring data integrity and compliance with policies	18

#### MICROSERVICE: customer_storage
- TYPE: database
- DESCRIPTION: This microservice manages the storage of customer data, including names, contact details, and profile information. It maintains a record of all admins' actions on customer accounts to facilitate auditing and compliance.
- PORTS: 21220


## CONTAINER NAME: frontend

### PORTS: 21400:21500
### DESCRIPTION: 
The frontend container is responsible for providing the user interface that facilitates user interaction with the RentYourExpert platform. This container manages the presentation layer and is tasked with rendering the various user interface components that allow users to navigate the platform, search for skilled professionals, and utilize all the app's features. The frontend container communicates with other backend microservices to display data such as user profiles, worker catalogs, reviews, and messages in the Q&A system. It ensures that the interface is user-friendly and intuitive, enhancing the overall user experience by integrating seamlessly with authentication, profile management, and communication functionalities. The frontend container is crucial for bridging the gap between complex backend operations and a simple, accessible user experience.
### PERSISTANCE EVALUATION
The frontend container, by itself, does not require persisting data as it primarily serves as the presentation layer for the RentYourExpert platform. Its main purpose is to render user interface components and facilitate interaction with the backend. Therefore, it does not need to store any persistent data but rather serves as a conduit to request and receive data from backend services, which handle data preservation.
### EXTERNAL SERVICES CONNECTIONS
The frontend container may need to connect to external services for hosting or delivering static assets such as images, stylesheets, or scripts via a CDN (Content Delivery Network) to enhance load times and performance. Additionally, it may connect to third-party libraries or frameworks (like React or Angular) that assist in UI rendering. However, the core functionality does not require connecting to external business-specific services; rather, it relies on communication with the backend containers for any data or user-related functionalities through API calls.
### MICROSERVICES:
#### MICROSERVICE: user_interface
- TYPE: frontend
- DESCRIPTION: This microservice provides the core user interface components for the RentYourExpert platform. It is responsible for rendering the platform's various pages and UI elements, allowing users to navigate the application, search for experts, view profiles, read reviews, and interact with the Q&A system. It relies on backend services to fetch and display necessary data while ensuring a responsive and accessible front end.
- PORTS: 21400
- TECHNOLOGICAL SPECIFICATION
The user interface microservice employs a modern JavaScript framework for building responsive and dynamic web interfaces. React.js is the preferred choice due to its component-based architecture, which allows for efficient management and reusability of UI components. The microservice can utilize the Create React App toolchain for a streamlined setup and integration of development tools. For styling, a combination of CSS-in-JS libraries such as Styled Components or Emotion can be used to enable scoped styles directly within components. State management can be handled using Redux, providing a reliable and predictable state container for JavaScript applications. Additionally, Axios will be used for making HTTP requests to the backend services through the API gateway
- SERVICE ARCHITECTURE
The service architecture for the user interface microservice follows a component-based design pattern, offering modularity and maintainability. The architecture is structured around a hierarchy of reusable components, encapsulating UI logic and presentation details. At the top level, a container component manages state and lifecycle events, communicating with backend services via the API gateway. The microservice embraces a Single Page Application (SPA) pattern, rendering content dynamically and updating the UI without requiring full page reloads. The architecture supports a loosely coupled interface by segregating UI components from business logic, adhering to the separation of concerns principle. The integration of Redux ensures a unidirectional data flow, promoting consistency across the app's state management. By leveraging tools such as React Router, the application efficiently handles navigation and dynamic content rendering in the browser.
- PAGES
Page Name	Description	User Stories
Homepage	Displays the main landing page of the RentYourExpert platform.	N/A
Search Experts	Allows users to search for skilled professionals based on specific criteria.	N/A
User Profile	Displays details of a user's profile, including their skills and expertise.	N/A
Worker Catalog	Lists available professionals for hire, including their profiles and reviews.	N/A
Reviews	Enables users to view and write reviews for professionals on the platform.	N/A
Q&A System	Allows users to ask questions and receive answers within the platform's Q&A section.	N/A
Messages	Facilitates communication between users and professionals through messaging.	N/A
Authentication	Handles user login, registration, and logout processes.	N/A

#### MICROSERVICE: api_gateway
- TYPE: middleware
- DESCRIPTION: The API gateway microservice serves as the primary point of contact between the frontend UI and backend microservices. It routes incoming requests from users to the appropriate backend services, ensuring efficient load balancing and handling responses that are then delivered to users. This service facilitates communication and integration of various functionalities such as authentication, profile management, and data retrieval.
- PORTS: 21410